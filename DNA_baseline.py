import numpy as np
from bisect import bisect_right
from typing import List, Tuple, Dict
from collections import defaultdict
# from sequence import REFERENCE, QUERY
import heapq
import os
from tqdm import tqdm

REFERENCE = (
    "TATTATAGTCTTCATTCTGTGTATTAGATTACTAAAGCATATTACTTCTGTCTAAATGAAATTTTGTATCCTTTAGTCAGCATCTTCCCTTTCTCCATCCACTTTTCTCTC"
    "CCAGCCTCTGGTAATCAACATTCTACCACAATTCTGTGAGTTCTACTTTTTTAGATTCCCCATGTAAGTAAGATCATGCTGTATTTGTCTTTGTGTGCCTGGCTTATCTGAG"
    "TTAACGTAATGTCCTCCAGGTTCATTCATGTTGCAAATGATAGAATTTCCTTCTTTATCAAGACTGGATAGTATTCCATTGGTGTATATATACTATATTTACTTTATGCATT"
    "CGTCTAGACACCTAGATTGCTTCCAAATCTTAGCTATTGTGAATAGCACTGCAGTTAACATGGGAGTGCAGATATTTTTTTAGCATACTGATTTCAATCCTTTGGCCCAGAA"
    "GTGGGATTACTAGATTATATGGTAGTTCTATTTTTAGTTTTTTGAGAGACCTTCATACTGTTCTCCATAATAGCTGTGATAATTTACATTCCCACCAACAATGTACAAGTTC"
    "CCTTTTTGCTACACACTCACCAACGCTTGTTATCTTTCATCTTTTTGATAGTCTTTCTAACAGGTGTGAGGTGATCCCTCATTGTGGCTTTAATCTGCATTTCCCTGGTGAG"
    "TGGTGATGATGAGCATTTTAATATATATCTGTTGGCCATTTGTACATCTTTTGAGCAATGTTTAGGTCCTCTGCACATTTTTAAATTGGGTTCTTTGTTTTCTTGCTATTGAG"
    "TTGAGTTCTTTGTCTATTTTAGATATTAGCGCCTTATCAGATATGTAGTTTGTAGATATTTTCTCTCAATCCATGGCACATCTTTTGCTCTGTTGTTTCTTTGCTGTGTATAA"
    "TCTTTTCAGTTAGATGCAATCTCATATGTTTTTGCTTTTGTTGTCAGTGCTTTTAGGGTAATATTTAAGAAATCTTTGCCCAGACCAGTGTTATGGAGCATTTTCCCTATGTTT"
    "TATTTCAGTAGCTTTACAGTTTCAGGTTTTATGTTTAAGTCATTAGTCCATTTTTAGTTGATTTTGGTGTATGGTGTGAGATAAGGGTCTAATTTCTTTCTTTTGCATGTGGTT"
    "AACCTGTTTTCCCAGCACAATTTATTGAGGATTGTCCTCTTTCCATTGTATATTCTTGGCACGTTTGTTGTAAATAATTGACCACAAATGTGTGGGTTTACTTCTGGGCTCTCTACCCTGTTTGATTGGTTAGTTGGTCGGTTTTTATGCTGTGCTGTTTTGGTTACATTAGCTTTGTAACAGGTTTTAAAATCAAGTACTGTGATACCTCTAGGTTTGTTCTTTTCGCTTTGGCCATTTGGGGTTTTTTGTGGTTCCATATGAGTTTTAGGATTGTTTTATTCTGTGAAGAATGACATTGGAATTTCGTTAGGCATTGCATTGAATCTGAATATCACTTTGGGAAGTATGAATAGTTTAACAATATTCTTGCATTCCATGAATATGGATAGCTTTCCATGTGTTTGTGTCATCTACTATATCTTTCATCAGTGTTTTGTATTTTCTAGTATATACATCTATTGCCTCCTTAAATTTACTTCTAAGTTGCTTTTTCTCGATGCTACTGTAAACGGGATTGAGTTCTTAATTTCTTTTTCAGGTACTTCATTCTTAGAATAGAGAAACACTGTAGATTTTGTATCCTGCAACTTTACTGAATTTGTTTATCAGACTTAATGGTTTTTTGGTGAAGTTGTTAGCATTTTCTATATGTGAGACCATGACATCAGCAAACAGATGATTTCTCTTCTTCCTCTGATATGGATGCCTTTATTTCTTTCTCTTGCCTAATCGCTCTTGCCAGGACATCTAACTCTGTTGAATAGCAGTGGCAAGAGCGGGCATTCTTATCTTGTTTTTGATCATAGAGGAAAAGCTTTTACCTTTTTCCAGGGAGCATGGCAGCTGTGGGCTTGTTACATATGGCCTTTATTGTGTATAAACACAATATATTCCTTCTATACCTAATGTGTTGACAGTTTTTATCATGAAATAATTTTGAGTTGTGTCACATGCTTTTTCCATATCTATTTTTTTTTATTATTATACTTTAAGTTTTAGGGTACATGTGCAAAACGTGCAGGTTTGTTACATATGTATACATGTGCCATGTCGGTGTGCTGCACCCATTAACTCGTCATTTAACATCAGGTATATCTCCTAATGCTATCCCTCCCCACCTCCCCCACCCCACGACAGGCGCCGGTGTGTGATGTTCCCCTTCCTGTGTCCATCTGTTCTCATTGTTCACTTCCCACCTGTGAGTGAGAACATGCGCTGTTTGGTTTTTTGTCCTTGTGATAGTTTGCTGAGAATGATGGTTTCCAGCTTCATCCATGTCCCTACAAAGGACATGAACTCATCATTTTTTATGGCTGCATAGTATTCCATGGTGAATATGTGCCACATTTTCTTAATCCAGTCTATCATTGTTGGACATTTGGGTTGCTTCCAAGTCTTTGCTATTGTGAATAGTGCCGCAATAATCGTACGTGGGCATGTGTCTTCATAGCAGCATATTTTGTAATCCTTTTGGTATATACCCAGTAATGGGATGGCTGGGTCAAATGGTATTTCTAGTTCTAGATCCCTGAGGAATCGCCACACTGACTTCCACAATGGTTGAACTAGTTTACACTCCCACCAACAGTGTAAAAGTGTTCCTGTTTCTCCACATCCTCTCCAGTACCTGTTGTTTCCTGACTTTTTAATGATTGCCATTCTAACTGGTGTGAGATGGTATCTCACCGTGGTTTTGATTTGCATTTCTCTGATGGCCAGTGATGATGAGCATCTTTTCACGTGTCTTTTGGCGGTATAAATGTCTTCTTTTGAGAAGTGTCTGTTCATATCCTTTGCCCACTTTTTGATGGGGTTGTTTTTTTCTTGTAAATTTGTTTGAGTTCATTGTAGATTCTGGATATTAGCCCTTTGTCAGATGAGTAGATTGCAAAAATTTTCTCCCATTCTTTAGGTTGCTGTTCACTCTGATGGTAGTTTCTTTTGTTGTGCAGAAGCTCTTTAGTTTAATTAGATGGCGTTTGTCAATTTTGGCTTTTGTTGCCATTGCTTTTGGTGTTTTAGACATGAAGTCCTTGCCCATGCCTGTGTCCTGAATGGTATTGCCTAGGTTTTCTTCTAGGGTTTTTATGGTTTTAGGTCTAACATGTAAGTCTTTAATCCATCTTGAATTAATTTTTGTATAAGGTGTAAGGAAGGGATCTGGTTTCAGCTTTCTACATATGGCTAGCCAGTTTTCCCAGCACCATTTGTAAAATAGGGAATCCTTTCCCCATTTCTTGTTTTTGTCAGGTTTGTCAAAGATCAGATAGTTGTAGATATGCGGCATTATTTCTGAGGGCTCTGTTCTGTTCCATTGGTCTATATCTCTGTTTTGGTACCAGTACCATGGTGTTTTGGTTACTGTAGCCTTGTAGTATAGTTTGAAGTCAGGTAGCGTGATGCCTCCAGCTTT"
    "GTTCTTATGGCTTAGGATTGACTTGGCAATGCAGGCTCCTTTTTGGTTCCATATGAATTTTAAAGTAGTTTTTTCCAATTCTGTGCAGAAAGTCATTGGTAGCTTGATGGGGATGGCATTGAATCTATAAATTACCTTGGGCAGTGTGGCCATTTTCACGATATTGACTCTTCCTACCCATGAGCATGGAATGTTCTTCCATTTGTTTGTATCCTCTTTTATTTCATTGAGCAGTGGTTTGTAGTTCTCCTTGAAGAGGTCCTTCACGTCTCTTGTAAGTTGGAATCCTAGGTATTTTATTCTCTTTGAAGCAATTGTGAATGGGAGTTCACTCATGATTTGGCTCTCTGTCTGTTATTGGTGTATAAGAATGCTTGTGATTTTTGCACATTGATTTTGTATCCTGAGACTTTGCTGAAGTTGCCTGTCAGCTTAAGGAGATTTTGGGCTGAGGCAATGGGGTTTTCTAGATATACAATCATGTCATCTGCAAACAGGGACAATTTGACTTCCTCTTTTCCTAATTGAATACCCTTTATTTCCTTCTCCTGCCTGATTGCCCTGGCCAGAACTTCCAACACTATGTTGAATAGGAGTGGTGAGAGAGGGCATCCCTGTCTTGTGCCCGTTTTCAAAGGGAATGCTTCCAGTTTTTGCCCATTCAGTATGATATTGGCTGTGGGTTTGTCATAAATAGCTCTTATTATTTTGAGATACGTCCCATCAATACCTAATTTATTGAGAGTTTTTAGCATGAAGGGTTGTTGAATTTTGTCAAAGGCCTTTTCTGCATCTATTGAGATAATTATGTGGTTTTACTCGTTGGTTCTGTTTATATGCTGGATTACATTTATTGATTTCTGTATGTTGAACCAGCCTTGCATCCCAGGGATGAAGCCCACTTGATCATGGTGGATAAGCTTTTTGATGTGCTGCTGGATTCGGTGTGCCAGTGTTTTATTGAGGATTTTTGCATCGATGTTCATCAGGGATATTGGTCTAAAATTCTCTTTTTTGGTTGTGTCTCTGCCAGGCTTTGGTATCAGGATGATGCTGGCCTCATAAAATGCGTTAGGGAGGATTTCCTCTTTTTCTATTCATTGGAATAGTTTCAGAAGGAATGGTACCAGCTCCTCTTTGTACCTCTGGTAGAATTTGGCTGTGAATCCGTCTGGTCCTGGACTTTTTTTGTTTGGTAAGCTATTAATTATTGCCTCAATTTCAGAGCCTGTTATTGGTCCATTCAGAGATTCAGCTTCTTGCTGGTTTAGTCTTGGGAGGGTGTATGTGTCCAGGAATTTACCCGTTTCTCCTAGATTTTCTAATTTATTTGTGTAAAGGTGTTTATAGTATTCTCTGATGGTAGTTTGTATTTCTGTGGGATTGGTGGTGATATCCCCTTTATCATTTTTTATTCCGTCTATCTGATTCTTCTCTCTTTTCTTCTTTATTAGTCTTGCTAGCAGTCTATCAGTTTTGTTGATCTTTTCAAAAAGCCAGCTCCTGGATTCATTGATTTTTTTGAAGGGTTTTTTGTGTCTCTATTTCCTTCAGTTCTACTCTGATCTTATTTCTTGCCTCTGCTAGCTTTTGAATGTGTTTGCTCTTGCTTCTCCAGTTCTTTTAATTGGGATGTTAGGGTGTCAATTTTAGATCTTTCCTGCTTTCTCTTGTGGACATTTAGTGCTACAAATTTCCCTCTACACACTGCTTTGAATGTGTCCCAGAGATTCTGGTATGTTGTGTCTTTGTTCTTGTTGGTTTCAAAGAACATCTTTATTTCTGCCTTCATTTCGTTATGTACCCAGCAGTCATTCAGGAGCAGATTGTCCAGTTTCCATGTAGTTGAGCGGTTTTGAGTGAGTTTCTTAATCCTGAGTTCTAGTTTGATTGCACTGTGGTCTGAGAGACAGTTTGTTATAATTTCTGTTCTTTTACATATGCTGAGGAGTGCTTTACTTCCAAATATGTGGTCAATTTGGAATAGGTGTGGTGTGGTACTGAGAAGAATGTGTATTCTGTTGATTGGGGGTGGAGAGTTCTGTAGATGTCTATTAGGTCCGCTTGGTCCAGAGCTGAGTTCAGTGCCTGGATATCCTTGTTAACTTTCTGTCTCACTGATCTGTCTAATGTTGATAGTGGGGTGTTAAAGTCTCCCATTATTATTGTGTGGGAGTCTAAGTATCTTTGTAGGTCTCTAAGGACTTGCTTTATGAATCTGGGTGCTCCCGTATTGGGTGCATATATATTTAGGATAGTTAGCTCTTCTTGTTGAATGATCCCTTTACCATTATGAAATGGCCTTCTTTGTCTCTTCTGATCTTTGTTGGCTTAAAGTCTGTTTTATCAGAGACTAGGATTGAAACCCCTGCCTTTTTTTGTTTTCCATTTCCTTGTAGATCTTCCTTCATCCTTTA"
    "TTTTGAGCCTATGTGTGTCTCTGCACGTGAGATGGGTTTCCTGAATACCGCACACTGATGGGTCTTGACTCTTTATCCAATTTGCCAGTCTGTGTCTTTTTATTGGAGCATTTAGCCCATTTACATTTAAGGTTACTACTGTTATGTGTGAATTTGATCCTGTCATTATGATGTTAGCTGGTTATTTTGCTCATTAGTTGATGCAGTTTCTTCCTAGCCTTGATGGTCTTTGCAGTTTGGCATGTTTTTGCAGTGGCTGGTACTGGTTGTTCCTTTCCATGTTCAGTGCTTCCTTCAGGAGCTCTTTTAGGGCAGGCCTGGTGGTGACCAAATCTCTCAGCATTTGCTTATCTGTAAAGGATTTTATTTCTCCTTCACTCATGAAGCTTAGTTTGGCTGGATATGAAATTCTGGGTTGAAAATTCTTGTCTTTAAGAATGTTGAATATTGGCCCCCACTCTCTTCTGGCTTGTAGAGTTTCTGCCGAGAGATCCGCTGTTAGTCTGATGGGCTTCCCTTTGTGGGTAACCCGACCTTTCTCTCTGGCTGCCCTTAACATTTTTTCCTTCATTTCAACTTTGGTGAATCTGAGAATTACGTGTCTTGGAGTTGCTCTTCTCGACGAGTATCTTTGTGGCGTTCTCTGTATTTCCTGAATTTGAATGTTGGCCTGCCTTGCTAGATTGGGGAAGTTCTCCTGGATAATATCCTGCAGAGTGTTTTCCAACTTGGTTCCATTCTCCCTGTCACTTTCAGGTACACCAATGAGACGTAGATTTGGTCTTTTCACATAGTCCTATATTTCTTGGAGGCTTTGTTCGTTTCTTTTAATTCTTTTTTCTCTAAACTTCTCTTCTCACTTCATTTCATTCATTTCATCTTCCATCACTGATACCCTTTCTTCCAGTTGATCGAATCGGCTACTGAGGCTTGTGCATTCGTCACGTAGTTCTCATGCTGTGGTTTTCAGCTCCATGAGGTCCTTTAAGGACTTCTCTGCATTGGTTATTCTAGTTAGCCATTTGTCTCGTTTTTTTCCAAGGTTTTTAACTTCTTTGCCATGGGTTCGAACTTCCTCCTTTAGCTCGGAGTAGTTTGATCGTCTGAAGCCTTCTTCTCTCAACTCGTCAAAGTCACTCTCCGTCCAGCTTTGTTCCGTTGCTGGTGAGGAGCTGTGTTCCTTTGGAGGAGGAGAGGCACTCTGATTTTTAGAGTTTCCAGTTTTTCTGCTCTGTTTTTTCTCCATCTTTGTGGTTTTATCTACCTTTGGGTCTTTGATGATAGTGACGTACAGATGGGGTTTTGGAGTGGATATCCTTTCTGTTAGTTTTCCTTCTAACAGTCAGGACCCTCAGTTGCAGGTCTGCTGGAGTTTGCTGGAGGTCCACTCCACACCCTGTTTCCCTGAGTATCAGCAGTGGAGGCTGCAGAACAGCGGATACCGGTGAGCAGGAAATGTTGCTGCCTGATTGTTCCTCTGGAAGTTTTGTCTCAGAGGAGTACCCGGCCATGTGAGGTGTTAGTCTGCCCCTACTAGGGGGTGCCTCCCAGTTAAGCTACTCGGGGGGGTCAGGGACCCACTTGAGGAGGCAGTCTTTCTGTTCTCAGACCTCCAGCTGCGTGCTGGGAGAACCACTACTCTCTTCGAAGCTGCAGACATTTAAGTCTACAGAGGATTCTGCTGCCTTTTGCTTGGTTATTCCCTGCCTCCAGAGGTGGAGTCTACAGAGGCAGGCAGGCCTCCTTGAACTGTGGTGGGCTCCATCCAGTTCCAGCTTCCCTGTGGCTTTGTTTACCTACTCAAGCCTTGGCAATGGTGGGCGCCCCTCCCCCAGCCTCGCTGCTGCCTTGCAGTTTGATCTCAGACTGCTGTGCTAGCAATGAGCGAGGCTCCGCAGGTGTAGGACCCTCCGAGCCAGGCGTGGGATACAATCTCCTGGTGTGCCATCTGCTAAGACCATTGGAAAAGCGCAGTATTAGGGTGGGAGTGACCCAATTTTCCAGGTGCCATCTGTCATCCCTTTCTCCATCTAGGAAAGGGAATTCCCTGACCCCTTGCGCTTCCTGGGTGAGGTGATGCCTCGCCCTGCTTCGGCTCACGCTGGGTGCACTGTACCCACTGTCCTGCACCAACTTTCCGACACTCCCCAGTGAGATGAACCCAGTACCTTAGTTGGAAATGCAGAAATCACTCGTCTTCTACGTCGCTCAAGCTGGGAGCTCTAGACTGGAGCTGTTCCCATTCAGCCATCTTGGCTCCACCAATCCATCTTACTTTTCGATGCATTTCAAAGTTGCAGATGACAGTACACATCATCCCATTATATCTCAGCATGAACATCAATAACAAGAATTCAATGTATATTTCTATTAATATGTATTTACTTTTTTCAGTAGGTTTTATATACAATAAAAGA"
    "CACACCATTTGATAAGTTTTAACATATACATATAGCACTGAACTCAAACTCCAAACAAGAAATAAAATACTTCCTATCACCCAGCAAGTTCCTCTAAGACTTTTCGCAATTAATCCCCACCCCACTATCGAAGACAGCACTGCTTTTTCTTCCATTATGTATCAATTTTGCCTGTTCTAGAACTCGATGTAAATGGAATACAGAATGTACTCTTTTGTGTAAGGTTTCTTTCACCTACCATGTATTTGAAATTCATTATGTTGTTGATGTACCAAGACAGTGTTCCTTATCATTGCTAAGTTGTATTCCATTTATGACTATACCTATTTGTTGATCCAGTCTCCAACTGGTGGGTATATGAGCTGTGTCCAGTTTCGGCCTATTATAAACACTTTTGAACAAATCTTGTAGATGTGTTTTCTTTTTCTATTAAGTAAATAACTAGGAGTAGAATTGCTAAGTCATGGGTTAGGGTAGAAAAACTCTTAATTTTATAAGAGTTCTCATTGCTCTACATATATGGTAGTATTACTCTTTAAGCTAATGGGACAAGTAAAGCAGCACCTCCTTGCAGTTTACTTTTGTATTTCCTTAATAATTGACGATGTTTAGTAACATTTTCATGTGTTCACTGGCCATTCAATATAGCATCATTTATGAAGTGTGTGTACTAATCCTTCTCCAATTAATCAAGTTGTATTTTCATTGTTCAGTTGTAGAATTTCTTTACATAGTCTTAATACAAGTCCTTTACAGATACAGGTTTTGCTATTATTTTCTTCATGTCTCTTAATGAGCAGAAGTTTTTTATTTTGAAGAAGTTTATAGAGTGTTAGGTGTTTTCTTTAAAACAGTTGCTGCTTTCTGTATCCTATCAAGGAAACCTTTGCCTGTTCTTTGTTTATTCTAAAAGCTTTATACTTTAGCTTCAACATATAGATCTATGATTCATCTTGATTTATCTTTTGGGTACCATGTGAGGTAGGGAGTCAAGGTGAACTTTCATCCATACAGATGTCTAGTTGTTCCAGCACTTTTTATTTAAAAGCCTTTCTTTTCCCTCATTGGATAGCTGTCTTTGTTAAAAATAATTTATCAGTTATCTGTTCTGCTCCATTTATATGCTTTTATATCCTTATGCTGATATCACAGTCTTCATTACTGTATTATTAGAGTAAATCTTGAAATAAGGAAATTTAAGTTTTCCACCTTGTAAATCATCAGGATTGCTTTGTATAACATAGGTCCTTTCTATCTTCATATAAACGTTATAATCAGCTTGTCAATTTCTACCAAAAGAGAAAAGTCCTGCTAAGAAAATGATTTGAACCACATTAAATTCATAGATCGACTAGGGATAACTGTGCTGTTTAACTTCCAAATATTCAGATTTTTCCTGAATATCTTATTGCTATTGGTTTCTACTTTAAATTCTACTGTAGTTACAGAGTATACTCTTTAGGATTTCAAACTTTTGAAATGTAGTGAGACATGTTTTAGGACCCATATATTATTTATCTCGGTATGCATATCATGTGTACTTGAATAGAATGTACACTCTATTTTAGTTGCCCATGATATTCTACAAATGTCAGTTAGGTCAAGGTGGCTGAAGTATTTTTACAGATCTTCTATATTCTAACTGATTTTTTGTCTAGGTTTTCTATAAGTTACAGAGTAGTGTTAAAATTTCCACCTATGACTGTAGATCTTATTAGGTATATACAAATTTATGATTACTATGTATTTCTAATGAGTTTTATCACTATGAAATGCCCTTCTTTATCTCCAGTACTGTCTTGAAGTCTACTTATCTAATATTAATATAACAACTCCATCTTATACTTACTGTTTGCATGCTACACCTTTCCTCATACATTTACTTTCAATCTATCTGTGTCATTATTTTTAAAATGCATCTCTGGTAGACAGAATACAGGAAGTCTTGTTTTCTATCCAATGTATGAATCTCTACCTTCAAATAAAACACTTAATCTATTTTCAATTAAGGTAATTATTCATAGACCTGACCTAGGTTTGTAAGTTTGCTATTTGTTTTCTTTACATCCTGATATGGTTTGGCTGTGTCTCCACCCAAATCTCATCTTGAATTGTAGTTCCCATAATCCTCACACGTCGTGGAAGGGACCTGGTGGGAGGTAACTGCATCATGGAGCAGTTACCCTCATGCTATTCTCGTGATAATGAGTGAGTTCTAAGGAGATCTGATGGTTTTATAAGGGGCTTTCCCCCAACTTTGCTCTCATTCTGTTCCTTGCTGCCACCCTGTGAAGGACATGTTTGCTTCCCCTTCCTCCATGATTGTAAGTTTCCTGAGGCCTCCCCAGCCATGCTGAACTGGGTCAATTAAACCTCTTTCCTTCATAAATTACCCAGTTTCGAGTATGTCTTTATTA"
    "GCAGTATGAGAACAGACTGACACACATCTCATTTGTTTTATATTCTGCTGTTCCTTCCTTTATACCTTTTTTCATTTTCTCTAAATACATTTCAGAATTCCATTTTGACTTCTCTTGTTTTTTAGTTATCACCTCTTTGCATTTTTTTCTTTTCCAGTGTTTGTTCTAGGAATTATAATGTATATCTTTAACTTTGCAGTGTACTTAAAGCTAATTCTACCCCTTCATAAAATAAAGACCACAGTAAGCACACAGCTCCATCAACCTAGACTCATCCTTTATACACAGCAGTCATATATAAATGCCATATTGTAACATTATAATTTCTGCTTTAAACAGTCACAACTGTATATTTCTTAATGGAGTGGGGAAGACTTACATTTTTACCAATTGCAGTGCTCTTCATTCCTGAAGTTCTGAGTTTCAGCTGGTAACACTTTCCTTCAGCTTGAAGTATCTCCTTAAACATTTCTTGTAGTATAAAGATTTTCTTAGCTAGAAAGTATGTTTTCTTATTTGGCTACAGAATTCTGAGTTGATTTTTATTTTCCCAGTACTTTAAAGGTGTTTATAGCCTGCTGGCCTGCATTATTTCTGATAAGAAGTCAGGTCTGTCAAAGATCAGATGGTTGTAGATATGTGGCATTATTTCTGAGGGCTCTGTTCTGTTCCACTGATCTATATCTCTGTTTTGGTACCAGTACCATGCAGTTTTGGTTACTGTAGCCTTGTAGTATAGTTTGAAGTCAGGTAGCGTGATGCCTCCGGCTTTGTTCTTTTGGCTTAGGATTGACTCGGCAATGCGGGCTCTTTTTTGGTTCCATATGAACTTTAAAGTAGTTTTTTCCAATTCTGTGAAGAGAGTCATTGGTAGCTTGATGGGGATGGCATTGAATCTATAAATTACCTTGGGCAGTATGGCCATTTTCACGACATTGATTCTTTCTACCCATGAGCACGGAATGTTCTTCCATTTGTTTGTATCCTCTTTTATTTCATTGAGCAGTGGTTTGTAGTTCTCCTTGAAGAGGTCCTTCACGTCCCTTGTAAGTTTGGATTCCTAGGTATTTTATTCTCTTTGAAGCAATTGTGAATGGGAGTTCACTCATGATTTGGCTCTCTGTTTGTCTGTTATTGGTCTAGAAGAATGCTTGTGATTTTTGCAAATTGATTTTGTATCCTGAGACTTTGCTGAAGTTGCTTATCAGCTTAAGGAGATTTTGGGCTGAGATGATGGTGTTTTCTAGATATGCAATCATGTCATCTGCAAACAGAGACAATTTGACTTCCTCTTTTCCTAATTGAATACCCTTTATTTCCTTCTCCTGCCTGACTGCCCTGGCCAGAACTTCCAACACTATGTTGAATAGGAGTGGTGAGAGAGGGCATCCCTGTCTTGTGCCAGTTTTCGGGAAAGGATTCCCTATTTAATAAATGGTGCTGGGAAAACTGGCTAGCCATATGTAGAAAGCTGAAACTGGATCCCTTCCTTACACCTTATACACAAATTAATTCAAGATGGATTAAAGACTTAAATGTTAGACCTAAAACCATAAAAACCCTAGAAGAAAACCTAGGCAATACCATTCAGGACATAGGCATGGGGAAGGACTTCATGTCTACAACACCAAAAGCAATGGCAACAAAAGCCAAAATTGACAAATGGGATCTAATTAAACTAAAGAGCTTCTGCACAGCACAAGAAACTACCATCAGAGTGAACAGGCAACCTACAAAATGGGAGAAAATTTTCGCAACCTACCTCATCTGACAAAGGGCTAATATCCAGAATCTACAATGAACTCAAACAAATTTACAAGAAAAAAACAAACAACCCCATCAAAAAGTGGGTGAAGGATATGAACAGACACTTCTCAAAAGAAGACATTTATGCAGCCAAAAAACACATGAAAAAATGCTCACCATCACTGGCCATCAGAGAAATGCAAATCAAAACCATAATGAGATACCATCTCACACCAGTTAGAATGGTGATCATTAAAAAGTCAGGAAACAACAGGTGCTGGAGAGGATGTGGAGAAACAGGAACACTTTTACACTGTTGGTGGGAGTGTAAACTAGTTCAACCATTGTGGAAGTCAGTGTGGCGATTCCTCAGGGATCTAGAACTAGAAATACCATTTGACCCAGCCATCCCATTACTGGGTATATACCCAAAGGACTATAAATCATGCTGCTATAAAGACACACGCACACCTATGTTTACTGCGGCACTATTCACAATAGCAAAGACTTGGAACCAACCCAAATGTCCAACAATGATAGACTGGATTAAGAAAATGTGGCACATATCCACCATGGAATACTATGCAGCCATAAAAAATGAAGAGTTCATGTCCTTTGTAGGGACATGGATCAAACTGGAAACCATCATTCTCAGCAAACTATCGCAAGGACAAAAAACCAAACACCGCATGTTCTCACTCATAGGTGGGAACTGAACAATGAGAACACTTGGACACAGGAAGGGGAACATCACACTCCGGGGACTGTTGTGGGATGGGGGAAGTGGGGAGGGATAGCATTAGGAGGTATACCTAATGTTAAATGATGAGTTAATGGGTGCAGCACACCAACATGGCACATGTATACATATGTAACAAACCCGCACATTGTGCACATGTACCCTAAAACTTAAAGTATAATAATAATATAAAAAAAAAAAGAAGTCAGCTACCATTCATTAGCATTTCTCAGGGTGCTTTCAAGATTTTTTTCTTTTTGTAGAGATGAAGTCTCACTTCGTTTCCCAGGCTGGTCTCAAACTCCTTAGCTCAAGCAATACCCCTCTTTGGCCTCCCCAAGTGTTGGCATTACAGGCATAAGCCACTGCAACTAGGCAGGATTTTTTGTCTATTATTTTCAACAGCTTCACTATAATGTACTTAAGTGTTATTTTATTGTATTTATCTTGTTTGGAATT"
    "CACTGAACTTCTTCAACATGTAAATTCATGTTTTTTACCAATTTAGGGAAATTTCCAGCCATAATTTCTCCAGAATTTTTTGACCCAATTTCCCCTGGCCTCTATTTCTAGGACTCCAAGTGTTAGACCTTTTGATATTGTCCTACCAGCCACTGAGGCTAGCTTCATTTTTTGAAATCTCTTTTTCACTTTTTAAGAAAGAATAACTTCTATGAATCCAACAACTTCAATGACTCCTTTTCTTTTCCTAATCTTCTGTAATCTCTAATCAGTTTTCATTTGAAATATTGTATTTTTTACCTATAGAATTTTCATTTAGTCCTTTTACCTAGTTTCCATTTTTCAGCTGAGGTTTCTTATCTGTTTATTCATGGTGTACATATTTTCTTTATATAACCTTAAGAAGAGTTATAACAGCTGCTAATTCTAACATAGGAGTCATATCAAGGCCAGTCTCAATTAATTGGCTTTTCACTTAAGTATGGGTCACATTTTTCTGTTTGTGTATGTGTGTGTCTACTGAATATGGATTGTATTCTGGACACTGTGCATAGTACATTTTTAGAAACTCTGGATTTGATTATGTTCTTCTGAAGACTATTTAGTTTTTTTTTGCTTAATAGGTAGGTAAGTTGGCTATACACCTCTGAACTCTTTCTTGTGCAAATGAAATATCTTTAGTTATTTTAGCCTAAGACTTTTATGCAGAATTTGGGACACGCTTCTTTATGAAAGACTACTTTATACTCACTAACTTTCTAGCTGCTAGAGTCACCCCTAACTCTGTCTTGTGGTTTTTATTCAAGCTTCCGTCACCTACACAACCAATGACCGAGTTCTGTCCTCTGGGAAACATCCACAAAAAATGAAATGCTCATCTTATACCATTCTATCTTCCAAATGTCAACATCCTTCAGTTTCTTCCTACTTTCTGTCCTCCTACTGTGCTTTCACATA"
    "CTTTTTTTATATTTTGTCCAAAAGTTGTCATTGTTATTTTCAGGAAAGGTAGTCCGACATGTGCCCCTCTGTAATTATTAAAAGCACAACTCCAAAGAATTGTTTATAATACCAGAAGACTACAAAAGTGACATCCATAGTGACTTTTTTTTTTTTTTTTTTTTGAGATGGAGTCTCGTTCTGTCACCCAGGCTGGAGTGCAGCGGCGCGATCTCAGCTCACTGCGACCTCCACCTCCTGGGTTCACACCATTCTTCTGCCTCAGCCTCCCGAGTAGCTGGGACTACAGGCGCCCACCAACACGCCCGGCTAATTTTTTGTATTTTTAGTAGAGACGGGGTTTCACTGTGTTAGCCAGGATGGTCTCAAATCTCCTGACCTCGTGATCTGCCTGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACAGCGCTGGCCGACTTATTACTTTGTTTTTTGAGACAGAGTCTGTCGCCCAGGCTGGAGTGCAGTGGTGCAATCCCGGCTCACAGCAAGCTCTGCCTCCCGGGTTCACGCCATTCTCCTGCCTCAGCCTCCTGAGTAGCTGGGACTACAGGCGCCCGCCACCATGTCCGGCTAATTTTTTTTGGTATTCTTTAGAGACAGGGTTTCACTGTGTTAGCCAGAATGGTCTTGACCTCCTGACCTCGTGATCCGCCCACTTCAGCCTCCCAAAGTGCTGGGATTACAGGCGTGAGCCACTGTGCCTGGCCAACTTACTACTTTTTAACATTACACAGTTGTAACAATATTTCCTAAAGCAATCATTTTCTGTTATAGTCCTTCTTATATCAGAAAACAGAAGTATTTGGGAAATGAAAAGATGGAGAAGAAAGAGGGGAATGAAGGGAAATAAGATGACCCAGTGATACTGAAAGGGGAAGAAGGTTCATGCAAAGAAAAGGAACAATCTGACAAACTCCTTGTCCTGGCATCTTTTAAGCTAAAGTTCAGCTATACAAGAAGGGAGATGATGAAAAGATAAAATATAATTTCTGGCACAGATGCAACAATTGATATTGGTACCTACAGTTACTCACTTTCATAAAGAGAATAAAAGCCCGAAAATGCTATACTAAGATAATGAACAGATACAGTATATAATACATGAGTTATAATATAAAATAACAGTAAAAAAATACAGACTCCTCAATAAAATCTCCAACCTTTTCTTTTTACCATAAGAACACACTGGAATATAGACTTCAGTACAATGTTTCTATAATTAAATCTTTAAAATATAATCATACAAAAAGCTTGACTAAGAACTCCAGATTTCCCTTTACAAGCACTAAATTTTATCAGTTTTTATATAAACATATATGAGAGGTTTCTAAAATGTATGATGATCAGAATTAAACTCTTTCAACTATAGGTAACTTATACGCAATCAGAGGATTCTGGGAAGATGGTGGAGTAGGAAGCACCACGCATGTGTTGCTCCACCTAGAAGATCATTGCACTGGCAGAATCTGTTCTATTTAACTATTTTGAAACTCTGGAATCTACTGAAGGCTTGTTAATGTCCAGGGGAAGGCCTGAATATAATTTTAATCACTTGCAGGTATTAGCACTAGCACAGTAGCAGCTATCCATTTGCCACCCTCAGCCCCAAGGCAGGCAGTTGTGCATGCATTCCAAGGAGCAGCTTGCGCGCAGCTTACAGGAACCAAGGACAGGCAAAAAGGACCCTCTCTTCCAAATATAGGGCATGTGTGCCCTGATCACTGAATGCTACTTCTGATCACAGAAATGGGACAAAGAGGTGGACACACATTGTTGCTTCATCTCCACTCACTGTTACAAGCCCTCTCCCACCCCCATCCCCACCCCCACCCACAAAGTAACTGCTGGGGATTTAAAGGATTTAGTTTTTCTCTTTTTCCCTTTTGGGAGTCAGATGTTAAAGACTACGGCATTTGAAAGCAACTGTATATAAGGGAAAAATTAGAAACTTCCTGCACATTCCTGGAGAAAAACTCAGGCTTAGAAAAGACTCAGAGAATCTTAAGCTTACACCTCAGGCTGATCCTTCACATACAGACAAGCCTCAAACAATAAAAATAAACAAAAACAGTAACATTAGAAAAAAAAAAAAAAAACAGCAGGCCGGGCATGGTAGCTCATGCCTATAATCTCAGCACTTTGGGAGGCTGAGGTGGGCAGATCACCTGAGGTCAGGAGTTTGAGACGAGCCTGGGCAACATGGCGAAACCCCATCTCTACTAAGAAGCACAAAAATTAGCTGGGCATGGTGGCACACACCTGTAATCCCAGCTACTTGGGAGGCTGAGGCAGGAGAATCGGCTGAACCCAGGAGGTAGAGGTTGCAGTGAGCCGAGATCACACCACTGCACTCCAGCCTGGGCAACAGAGTGAGACTCTGCC"
    "TCAAAACAAAACAAAACAAACAGCAAATGCTGGGGAAGAGGGAGAATCTAATTTCCAGACTTACCACATCATTATATTCAAATGCCCTGTTTTCAACAAAAAAATAACAAGATATACAGGAAAGTATGACACATTCAAAAGAAAAAAAAATAAAACAACACAACTGTCCTTGAAAAAGACCTGATGGCAGACCTTCCAGAGAAAGACTTTATGACAACTGTTTTAAAGTTGTTCAAAGTACTAGGGCGGGCACAGTGGCTCATGACTGTAATCCCAGCACTATGGAAGGCCAAGGCGGGAAGATCACCTGAGGTTGGCAGTTTGAGACCAGCCTGGCCAACATGGCAAAACCCCATCTCTACTAAAAATACAAAAATTAGCCGGGCATGGTGGCACACGCCTGTAATCTCAGCTACTAGGGAGGCTGAGGCATGAGAATCGCTTGAACCCGGGAGGCAGAGGTTGTAGTGAGTTGAGACTGTGCCACTGCACTCCAGCTCGGGTGACAGAGTGAGACTCTGTCTCAAAAAAAAAAAAAAAAAAAAAAAACGAAATGAGAAAAGAGGCTGGGTGCGGTGGCTCACACCTGTAATCCCAGCATTTTGGGAGGCCAAGGTGGGTGGATCACCTGAGGTCAGGAGTTCGAGTCCAGCTGGGCCAACATTGTGGAACCCCATCTCTACTAAACATACAAAAATGAGCCAGGCGTGGTGGCACATGCCTGTAATCCCAGCCTCAGGAGGCTGAGGCAGGATAACTGCTTGAACCCAGGAGGCAGAGGTTGCAGTGAGCCAAGATCATGCCACTGCACTCCAGCCTGGGCGATAGAGACTCCATTAAAAAAAAAAAAGAAGAAAGAAAGAAGAAAGGAATTTAAACATTTCATGAAAAAAATCAAGTAAACACAAAAGAAGACAGTAATGCAGGAAATGAGGGCCCCCACAAAAAGCAGTAAGTTATGTAAACAACAAACAACAAAATGACAGAAATCCTTCTGTACAAATAATTTAAATTCAAATGGATTAAACTCTCCAATCAAAAGACAGAGATTGACAGAATGGAGGAGGATTCAACCATATGTTGCCTATACTAGACTTACTTTAGACTGACAGACACAGTTTGAAAATTAAAAGACAGAAAAAGATATTCCATGCAAATACTAACCAGAACAGAGTAGAGGTGGCTATACTAACAACAGAGAAAACAGTCTAAATCAAAAAAGGTTACAAGAGACAAAGGACATTATATATGAATACATGATTTGATACAACAAGAAGACAAAAATTATAAACATTTATGCACCAATTAAAAGACCTCAAAAATACATGAAGGAAAAACAGACAACTGAAGGGAGAAACAGACCTTTCTAAATAACAGATGATTAAATCAATACCCTACTTTCAATAGTGGATAGAATAACCAGATCGAAGATAAGTAAGGAAACAGAGGACCTCAGACAATAACCAACTAGATCTGACAGACATATACACAACACTGTACCCAACAATAGCATACATATTCTTCTCAAGTGAATATAGAACATTTTCCAGGATAGACCATATGTTAGGTCACAAATTAAGTAAAAAATGTGGTATAAACATACAATGGAATATTATTCAGCCTTTAAAAAGAAGGAAATTCTAGCCGGGCTCGGTGGCTCATGCCTGTAACCCCAGCACTTTGTGAGGCTGAGGTGGGCGGATCACTTGAGGTCAAGAGTTCAAGACCAGCCTGGCCAACATAGTGAAGCCCTGTCTCTAGTAAAAATACAAAAATTAGCTAGGCGTGGTGGCGTGCGCCTATAATCCCAGATACTAGGAGGCCAAGGCACAACAATCACTTGAACCCAGGAGGCGGAGGTTGCAGTGAGTCAAGATCGCACCACTGCACTCCAGCCTGGCCAACAGAGTGAGACTCCATCTCAAAAAATAAAAATAAAAAATTCTAACAACATGGATTAACCTTAAGGATATTATGCTAAGTGAAATAAACCAGTCACAGAAAAACAAATACTGTATGATTCTATTCATATGAGGTAATTACAGTAGTCAAAATCATACACAAAGTAGAATGGTGGTTGCCAGGAGCTAGGGAAAGACAGAAGGAGGAGTTACTGTTTAATGAGTACAGAATTTCAATTTTACAAGATGAAAAGAGTTCTGGAGATAGAAGGTGGTGATGGTAGTTACACAACATTATGAAGATACTCAATACCACTGAATTGCACATTTTAAAATGGTCAAAATAGTAAATTTTATGTTATGTGTATTTTAAAATGTAAAACATTGGGAAAAAAGATGAAAACAATGGGCAGTTCTTAGGCATTAACAATTAGTACACATCTAGTCATATCATTTTATTCTAACTCACTATTAAAACCGATTAAAAGCAAAACTGATTTTCAAAAATTTATATAAATAAGTAAAAATACAGAAAATTATACATATGCACATTAAATTTAGAAATGTTTTTAAAGGTTTGTCAGATCACTTTCTGCAAGATTATAATACACTCCCATGTAGTACAAAATTTTGTTTATTCCTGTTTTTTTAAACTTTTCCGTAATTCCATCTTCTATGAGTTACTGAATCATTTTTTCTACCCTTACTGATAAGAATACAAACAAAATATCTGTTTCATAAAAATGAATCCGTATTTCAAATTTGAAAGCCACATTTACTTTTCCTTTAAAACTACATGAACTACTTTCAGATCTCTTATCTGTGCCAGCCAGCTTGTTGTTTACCTTCTCACAAATGTGCCTGAGTCTCACTCACATTACTTTACACTGATTATGTCTATTAGCCTGTATTTGCATAGGAGTCACTACATAAAGTATATAAGAATGACATAACAAAGTTCACCTAAATCCAATTTCCTTCACACTTCCTGAAAAATTAGGTTATGAGAATTCACTGCTATGTCTCTGCTGCCCTCTGTAGGTA"
    "TGGTGTCTTAGTCCACTTTGCTTTGCTTTAACAGAATACCACAAGATAGGTAACTTACAAAGAAAAGAAGTTTATTTCTCATAGTTATGGAGGCTGAAAATTCCAATATCAAGGTGCTGGCTCCTGGTGAGGACCTTTGTCCTACACCTTCCCATGGCAGAAAGCAGAACGACAAGTGAGGGTGAGAGCAAGGGACAGAAAATTTTTATAACAACACATTCTTGTGGTAACAAACCCACTACTGTGATAATGATATTAATCTATTCATGAGGGCAAGGCCCTCATGGCCTAATCCTAATACAGGAACCATTAAAAGGTTCTTTTAATATATACCATTCTTTTAATGTATACCATTCTCACATTGGTATAAAGATATACCTGAGACTGGGTAATTTATAAAAGACGAGGTTTAACTGGCTCACAGTTCTGCAGGCTGTACAGGAAGAATGGTGGCATATGCTTCTGGGGACACCTCAGGGAGCTTTCACTCATGGTGGGAGGCAAAGTGGGTGCAGGCACTTCACATGGTGAAAGCAGGGGGAGGAGGAAGCAGACACTTCACATGGTGAAAGCAAGAGAGCAAAGTGGGCAGTACTACACACTTTTACGTATTTATTTATTTTAATTTTTTTTAATAGAGACGAGGTCTTGCTATGTTGGCCAGGTCGGTCTCAAACTCCTGGGCTCAACTGATCCTCCCATCTTGGCCTCCCAAAGTGCTGGGGTTACAGGCAGGAGACACAGTGCCTGACCACTACACACTTTTAAATTATCAGCTCACATAAGAACTCACTCACTATTGTGAGGACAGTACCAAGGGTTTTGGTGCTAAACCATTCATGAGAAATCCACTCCCATAATCCAGTCACCTTCCACCAGGCCCCATTTCCAACAATGGAAATTACAATTCAACATGAGATTTGGGCGGGGACACAGACTCAAACTATATTAGTCCCCTATTTTAATACTGTCACCATGGTAATTAAATTTCAACAAGAGTTTTGGAGAGGACATTCAAACCATAGCAAATGCTTATTGGAAGATACCAATAAAATAAATTATAAAAACCCAGACAAGAATAAAAAGTACTATCAACTTAATATGGAAAGTCTTATCAGTAATCAAATACATCTGTTAAATGTCCTAAAAGAAAATACCGCAGGCCAGGTGCAGTGGCTCACACCTGTAATCTCAGCACTTTGGGAGGCCGAGGTGGGTGGATCACCTGAGGTCAGGAGTTCAAGACCAGCCTGGCCAATACGGTGAAACCCTGTCTCTACTAAAAATACAAAAATTAGTTGGGCATGGTGACGGGCGCCTGTAATCCAAGCTACCATGTCATCTTTGATGAACAAGGATGCAAAAATCACCAATATACTAATAAACTGAATTCAACAGCACATTAAAAGGATCATTCACATGATCAAGTGGGATTTACCCTTGGGATGCAAAGATGGTTCAACATATGCAAATAAATAAATGTGATACACCACGTTAATAGAATGGAAGACAAAATCCATATGATCACCTGAATAGATATGGAAAGGGGTGGAGCCAAGATGGCCAAACAGGAACAGCTCCAGTCTACAGCTCCCAGCGTGAGTGACGCAGAAGACGGGTGATTTCTGCATTTCCAACTGAGGTATTGGGTTCATCTCACTGGGGAGTGTTGGACAGAGGGTGCAGCACACTGGGTGCAGTGCACCCAGCGTAAGCCGAAGCAGGGCGAGGCATCACCTCACCCGGGAAGTGCAAGGGGTCATGGAATTCCCTTTCCTAGTCACAGAAAGGAGTGACAGACAGCACCTGGAAAATCGGGTCACTCCAACCCTAATACTGCGCTTTTCTAACGGTCTTAGCAAATGGCACACCAGGAGATTATATCCCACAACTGGTTCGGAGAGTCCTACGCCCACGGAGCCTCGCTCATTGCTAGCACAGCAGTCTGAGATCAAACTGCAAGGCAGCAGCCAGGCTGCGGGAGGGGCAGCCACCATTGCCAAGGCTTGAGTAGGTAAACAAAGCCACAGGGAAGCTGGAACTGGGTGGAGCGCACCACAGCTCAAGGAGGCCTGCCTGCCTCTGTAGACTCACCTCTGGGGGCAGGGCATAACCAAACAAAACGCAGCAGAAATCTCTGCAGAATTAAATGTACCTGTCTGACAGCTTTGAAGAGAGTAGTGGTTCTCCCAGCATGCAGCTGGAGATCTGAGAACGGACACACTGCCTCCTCAAGTGGGTCCCTGACCCTCGAGTAGCCTAACTGGGAGGGACCCCCCAGTAGGGGCAGACTGACACCTCACATGGCCAGGTACTCCTCTGAGACAAAAACTTCCAGAGGAATGATCAGGCAGCAACATTTGGTATAAACCAATATTGGCTGTTCTGCAGCCTCCGCTGCTGATACCCAGGCAAACAAGGTCTGGAGTGGACCTCCACCAAACTCCAACAGACCTGCAGCTGAGGGTCCTGACTGTTAGAAGGAAAACTAACAAACACAAAGGACATGCACACCAAAACCCCATCTGTACGTCACCATCATCAAAGACCAAAGGTACATAAAACTACAAAGATGGGGAAAAAACAGAGCAGAAAAACTGGAAACTCTAAAAATCAGAGTGCCTCTCCTCCTCCAAAGGAACACAGCTCCTCACCAACAACGGAACAAAGCTGGACGGAGAATGACTTTGATGAGTTGAGAGAAGAAGGCTTCAGACGATCAAACTACTCCGAGCTAAAGGAGGAACTTCGAACCCATGGCAAAGAAGTTAAAAATCTTGAAAAAAATTAGACGAATGGCTAACTAGAATAACCAATGCAGAGAAGTCCTTAAAGGACCTCATGGAGCTGAAAACCACAGCACGAGAACTACGTGACGAATGCACAAGCCTCAGTAGCCGATTCGATCAACTGGAAGAAAGGGTATCAGTGATGGAAGATGAAAT"
    "GAATGAACTGAAGTGAAAAGAGAAGTTTAGAGAAAAAAGAATTAAAAGAAACGAACAAAGCCTCCAAGAAATATAGGACTATGTGAAAAGACCAAATCTACGTCTCATTGGTGTACCTGAAAGTGACAGGGAGAATGGAACCAAGTTGGAAAACACTCTGCAGGATATTATCCAGGAGAACTTCCCCAATCTAGCAAGGCAGGCCAACATTCAAATTCAGGAAATACAGAGAACGCCACAAAGATACTCGTCGAGAAGAGCAACTCCAAGACACGTAATTCTCAGATTCACCAAAGTTGAAATGAAGGAAAAAATGTTAAGGGCAGCCAGAGAGAAAGGTCGGGTTACCCACAAAGGGAAGCCCATCAGACTAACAGCGGATCTCTCGGCAGAAACTCTACAAGCCAGAAGAGAGTGGGGGCCAATATTCAACATTCTTAAAGACAAGAATTTTCAACCCAGAATTTCATATCCAGCCAAACTAAGCTTCATGAGTGAAGGAGAAATAAAATCCTTTACAGATAAGCAAATGCTGAGAGATTTGGTCACCACCAGGCCTGCCCTAAAAGAGCTCCTGAAGGAAGCACTGAACATGGAAAGGAACAACCAGTACCAGCCACTGCAAAAACATGCCAAACTGCAAAGACCATCAAGGCTAGGAAGAAACTGCATCAACTAATGAGCAAAATAACCAGCTAACATCATAATGACAGGATCAAATTCACACATAACAATATTAACCTTAAATGTAAATGGGCTAAATGCTCCAATAAAAAGACACAGACTGGCAAATTGGATAAAGAGTCAAGACCCATCAGTGTGCGGTATTCAGGAAACCCATCTCATGTGCAGAAGACACACACAGGCTCAAAATAAAGGATGGAGGAAGATCTACCAAGGAAATGGAAAACAAAAAAAGGCAGGGGTTTCAATCCTAGTCTCTGATAAAACAGACTTTAAACCAACAAAGATCAAAAGAGACAAAGCAGGCCATTATGTAATGGTAAAGGGATCAATTCAACAAGAAGAGCTAGCTAGCCTAAATATATATGCACCCAATACGGGAGCACCCAGATTCATAAAGCAAGTCCTTAGAGACCTACAAAGATACTTAGACTCCCACACAATAATAATGGGAGACTTTAACACCCCACTATCAACATTAGACAGATCAGTGAGACAGAAAGTTAACAAGGATATCCAGGTATTGTACTCAACTCTGCACCAAGCGGACCTAATAGACATCTACAGAACCCTCCACCCCAAATGAACAGAATATACATTCTTCTCAGCACCACACCGCACTTATTCCAAAATTGACCACATAGTTGGAAGTAAAGCACTCCTCAGCAAATGTTAAAAGAACAGAAATTATAACAAACTGTCTCTCAGACCACAGTGCAATCAAACTAGAACTCAGGATTAAGAAACTCACTCAAAACTGCTCAACTACATGGAAACTGAACAACCTGCTCCTGAATGACTACTGGGTACATAACGAAATGAAAGCAGAAATAAAGATGTTCTTGGAAACCAACGAGAGCAAAGACACAACATAACCAGAATCTCTGGGACACATTCAAAGCAGTGTGTAGAGGGAAATTTATAGCACTAAATGCCCACAAGAGAAAGCAGGAAAGATCTAAAATTGACACCCTAACATCACAATTAAAAGAACTAGAGAAGCAAGAGCAAACACATTCAAAAGCTAGCAGAAGGCAAGAAATAACTAAGATCAGAGCAGAACTGAAGGAAATAGAGACATAAAAAACCCTTCAAAAAATCAGTGAATCCAGGAGCTGGTCTTTTGAAAAGATCAACAAACTTGATAGGCTGCTAGAAAGATTACTAAAAGAGAAAAGAGAGAAGAATCAAATAGATGCAATAAAAAATGATAAAGGAGATATCACCACTAATCCCACAGAAATACAAACTACCATCAGAGAATACTATAAACACCTCTACGCAAATAAACTAGAAAATCTAGAAGAAATGGATACATTCCTGGACACATACACCCTCCCAAGACTAAACCAGAAAGAAGTTGAATCTCTGAACGGACCAATAACAGGCTCTGAAATTGAGGCGATAATAATAGCTTACCAAACAAAAAAAGTCCAGGACTGGATGAATTTACAGCCGAATTCTACCAGAGGTACAAGGAGGAGCTGGTACCATTCCTTCTGAAACTATTCCAATCAATAGAAAAAGAGGGAATCCTCCCTAACTCATTTTATGAGGCCAGCATCAGCCTGATACCAAAGCCTGGCAGAGACACAGCAAAAAAAGAGAATTTTAGACCAATATCCCTGATGAACATGGATGCAAAAATCCTCAATAAAATACTGGCAAACCAAATCCAGCATCACATGGAAAAGCTTATCCACCATGATCAAGTGGGCTTCATCCCTGGGATGCAAGGCAGGTTCAACATATGCAAATCAATAAACATAATCCATCATATAAACAGAACCAACGAGTAAAACCACATGATTATCTCAATAGATGCAGAAAAGGCCTTTGACAAAATTTAACAACCCTTCATGCTAAAAACTCTCAATAAATTAGGTATTGATGGGACGTATCTCAAAATAGTAAGAGATATCTATGACAAACCCACAGCCAATATCATAATGGGCAAAAACTGGAAGCATTCCCTTTGAAAACTGGCACAAGACAGGGATGCCCTCTCTCACCGCTCCTATTCAACATGGTGTTGGAAGTTCTGGCCAGGGCAATCAGGCAGGAGAAGGAAATAAAGGGTATTCAATTAGGAAAAGAGGAAGTCAAATTGTCCCTGTTTGCAGATGATACGATTGTATATTTATAAAACCCCATCGTCTCAGCCCAAAATCTCCTTAAGCTGATAGGCAACTTCAGCAAAGTCTCAGGATACAAAATCAATGTGCAAAAATCACAAGCATTCTTATACACCAATAACAGAGAAAGAGAGAGCCAAATCATGAGTGAACTCCCATTCACAATTGCTTCAAAGAGAATAAAACACCTAGGAATCCAACTTATAAGGGATTTGAAGGACCTCTTCAAGGAGAACTACAAACCACTGCTCAATGAAATAAAAGAGGATACAAACAAACAGAAGAACATTCCATGCTCATGGACAGGAAGAATCAGTATCATGAAAATGGCCATACTGCCCAAGGTAATTTATAGATTCAGTGCGATCCCCATCAAGCTACCAATGACTTTCTGCACAGAATTGGAAAAAACTACTTTAAAGTTCATATGGAACCAAAAAAGAGCCGGTATTGCCAAGTCAATCCTAAGGTGAAAGAACAAAGCTGGAGGCATCGTGCTACCTGACTTCAAACTATACTACAAGGCTGCAGTAACCAAAACTGCATGGTACTGGTACCGAAACAGAGATATAGAGCAATGGAACAGAACAGAGCCCTCAGAAATAATGCCACATATCTACAACCATCTGATCTTTGACAAACCTGACAAAAACAAGAAATGGGAAAACGATTCCCTATTTAATAAATGGTGCTGGGAAAAGTGGCTAGCCATATGTAGAAAAGTGAAACTGGATCCCTTCCTTACACCTTATACTAAAATTAATTCAAGATGGATTAAAGACTTAAATGTTAGACCTGAAACCATAAAAACCCAAGAAGAAAACCTAGGCAATACCATTCAGGACATGGGCATGGGCAAGGACTTCGTGTCTAAAACACCAAAAGCAATGGCAACGAAAGCCAAAATTGACAACTAGGATCTAATTAAACGAAAGAGCTTCTGCACAGCAAAAGAAACTACCATCTGAGTGAACAGCAACCTACAGAATGGGAGAAAATTTTTACAGTCTGCTCATCTGACAAAGGGCTAATATCCAGAATCTACAATGAGCTCCAACAAATTTTCAAGAAAAAAACGCCATCAGAAAGTGGTCGAAGGATATGAGCAGACACTTCTCAAAAGAAGACATTTATGCAGCCAAAAGACACTTGAAAAGATGCTCATCATCCCTGGCCATCAGAGAAATGCAAATCGAAACCACAATGAGATACCATCTCACACCAGTTAGAATGGCAGTCATTAAGAAGTCAGGAAACAACAGGTGCTGGAGAGGATGTGGAGAAATAGGAACACTTTTACACCGTTGGTGGGACTGTAAACTAGTTCAACGATTGTGGAAGTCAGTGTGGCGATTCCTCAGGGATCTAGAACTAGAAATACCATTTGACCCAGCCATCCCATTACTGGGTATATACCCAAAGGATTATAAATCATGCTGCTATAAAGACACATGCACACGTATGTTTATTGGGGGACTATTCACAA"
    "TCGCAGAGACTTGGAGCCAAGCCAAATGTCCAACAATGATAGACTGGATTAAGAAAATGTGGCACATATACACCATGGAATACTATGCAGCCATAAAAAAGGATGAGTTCATGTCCTTTGTAGGGACATGGATGAAGGTGGAAACCATCATTCTCAGCAAACTATCAGAAGGACAAAAAACCAAACAGCGCATGTTCTCACTCATAGGTGGGAATTGAAAAGTGAGAACACAGGGGCACAAGAAGGGGAACATCATACGCCGGGGCCTGTTGTCGGGTGGGGGCAGGGTGGAGGGATAGCATTAGGAGGTATACCTAATGTTAAATGACGAGTTACTGTGTGCAGCAGACCAACATGGCACATGTATACATATGTAACTAACCTGCACATTGTGCGCATGTACCCGAAAACGTAAAGTATAATAAAAAAAGAAGAAGAAGAGAAAAAAAAAAGAAAAGTAAGGTGGATTAATGGATAGAGAAATGTGATAAACTGTCATAGCTAAATAATAACAATTGTAAAGCCTTGGTGATGTATATATTGGTTTTTGCTAGTATCTCTAAAAAATTTCTGGTCGAAATTTGCATAATATTCTGTGTGAAAAATCTTCTCAGGGAACATAGACCTGTGTTATTGTATTTATGTAAGTAGTTGTCATATAATTCTTTTATCTTAGAGAATCTGAAGTTTCCAATGTGAGTGTACAGTGTCTCACCACCACCTGAGTTTATTTCTGGTTGTTGTAATGCAGTACAATTGATAATGAAATTTTTTTGATGTTTTTGCCGTAGACATGGAATGTATAGTGCTCTAGCTTTTACTTTTTGAGAGACAGAAAAAGGCCCTGAGCATTGGTGTTGTGTCAGTCATCCTAGGCTCAGATCTCCATTCTACCTCTCACTGAATGCTTGGCCTTAAGCAGGTATTTAACTTTTTTTTAGATCCAATTGGTTTGTCTGTTAAATGCCTTCAGTAACGTATTCCTCACATAGTTGCTTTGAAGATTGGTGAGTCATGGCACAGCACACAGCTGAACATAGAAGACATTCAAGCAATGCCAGATTCCTTTAGGGTGCAGGTAGACATTCCTAGGGTTTGTAATAGATTTAGAAGTAGAATTAGTCTTCTACTTCTTCAGATCTCCTTTGAGGTCTGAGTGACTACAGAACCCATGGACACCTTTATTTACGAAATGCTGTGTTTCTGGTGTCTAAGGCCTGATTGCATCTTGATTGGAAACTATTAGTTAAACATTTATAAGAAATAATACTGTAACTTTTGTTTAAGCTAAAAATTATTTTCTTGAATTTTAGTTTATTGGTCTTAGTTAATACTATAACCTTTACAGTGCTAAAAAGTTATAATCCAATTGTGTTCTCTGGTGACATTAACTGAAATACATGTTCTTTTCTAGAGACCTTATTCTGTAAATCATAATAAAAAATTTCTTATGAAATTAAGTCTTTATAGATACCTCATTTAATTCTTACCATTCTATTAATAAAATACATTTTTATATTACTTATATGTATTGAGTATCTTGTCTGAAATCACACAACTAGAAAGTAGAAAGTTGTCATTTGAACACAACTCTGTGTGATTCTTAACCTTGTTTTCTTAGCCATTTTGCTGAATGGCCTTTCCTTCTTTCCTCTATCCCCCATCCCCCATCCCCCATTTCCATGTATGTGTCTGTTGTCATTCTCTACTAGCTTTTTCTTCTTATGTACAAATAGGTCAGATGTCTACATTTAAATAAACAGCATCTTTAACCCTGCTGCTCCCATACTCAAGACAAATTGACAAGTATGTTATTATCTGTGCTGTGAAGTGAAATTAGATCTTTTGATTTCAACATCAAAACCTTATAAGATGTTTTATCTTTTTTAGAAGTCCTTAATCACAAGTTAGAGCAATTAACACCTATATTACTAATAATATTTCCAGTAGTATGGATGCTTTGGTTATGGTTAAATGGTTCTGAAATCTACACCTGAGATGCTTCCCTTAAAGGGGCTCTTTGGCCAGTTCACCAATTACTTGGAAGAGGAAGAGGAAGTCTAGGTTGATTATATTGCTTTGAGTTAGAATATCTGAGAAAGTGGTACTTATATTAGTTTGCTAGTGCTGCGATGATAAAGTACTACATACTGGATGGCTTCAATAACAGAACTTTATTTTCTCACAGTCCTAGAGGCTGGAAGATCGTCTGGGACAAGTCCAGGTGCTGGCAGGGTTGATTTCTCCTGAGGCCTCTCTCTGTGGCTTGCAAGGTGGCTGTGTCTTGACATGGCCTCTTCTCTGTGTGTCCCTCCCCCTTCTTATAAGGATGTCAGTCAGATTGGATTAGGGCCCACCCTAACGGCAGCATTTTAACATTCACTTATTTAAAGACCTTATCTCTAAGAACATTACA"
    "TTCTGAGGACCTGAGACTTTCAGTGTATAAATTTGGGAGGACACAATTTAGCCTATAATAGTGCTATAAAGAGAAGTTCAAAAATGAAGATGGAGATTTTATTTTTTAAG"

)

QUERY = (
    "TATTATAGTCTTCATTCTGTGTATTAGATTACTAAAGCATATTACTTCTGTCTAAATGAAATTTTGTATCCTTTAGTCAGCATCTTCCCTTTCTCCATCCACTTTTCTCTCCCAGCCTCTGGTAATCAACATTCTACCACAATTCTGTGAGTTCTACTTTTTTAGATTCCCCATGTAAGTAAGATCATGCTGTATTTGTCTTTGTGTGCCTGGCTTATCTGAGTTAACGTAATGTCCTCCAGGTTCATTCATGTTGCAAATGATAGAATTTCCTTCTTTATCAAGACTGGATAGTATTCCATTGGTGTATATATACTATATTTACTTTATGCATTCGTCTAGACACCTAGATTGCTTCCAAATCTTAGCTATTGTGAATAGCACTGCAGTTAACATGGGAGTGCAGATATTTTTTTAGCATACTGATTTCAATCCTTTGGCCCAGAAGTGGGATTACTAGATTATATGGTAGTTCTATTTTTAGTTTTTTGAGAGACCTTCATACTGTTCTCCATAATAGCTGTGATAATTTACATTCCCACCAACAATGTACAAGTTCCCTTTTTGCTACACACTCACCAACGCTTGTTATCTTTCATCTTTTTGATAGTCTTTCTAACAGGTGTGAGGTGATCCCTCATTGTGGCTTTAATCTGCATTTCCCTGGTGAGTGGTGATGATGAGCATTTTAATATATATCTGTTGGCCATTTGTACATCTTTTGAGCAATGTTTAGGTCCTCTGCACATTTTTAAATTGGGTTCTTTGTTTTCTTGCTATTGAGTTGAGTTCTTTGTCTATTTTAGATATTAGCGCCTTATCAGATATGTAGTTTGTAGATATTTTCTCTCAATCCATGGCACATCTTTTGCTCTGTTGTTTCTTTGCTGTGTATAATCTTTTCAGTTAGATGCAATCTCATATGTTTTTGCTTTTGTTGTCAGTGCTTTTAGGGTAATATTTAAGAAATCTTTGCCCAGACCAGTGTTATGGAGCATTTTCCCTATGTTTTATTTCAGTAGCTTTACAGTTTCAGGTTTTATGTTTAAGTCATTAGTCCATTTTTAGTTGATTTTGGTGTATGGTGTGAGATAAGGGTCTAATTTCTTTCTTTTGCATGTGGTTAACCTGTTTTCCCAGCACAATTTATTGAGGATTGTCCTCTTTCCATTGTATATTCTTGGCACGTTTGTTGTAAATAATTGACCACAAATGTGTGGGTTTACTTCTGGGCTCTCTACCCTGTTTGATTGGTTAGTTGGTCGGTTTTTATGCTGTGCTGTTTTGGTTACATTAGCTTTGTAACAGGTTTTAAAATCAAGTACTGTGATACCTCTAGGTTTGTTCTTTTCGCTTTGGCCATTTGGGGTTTTTTGTGGTTCCATATGAGTTTTAGGATTGTTTTATTCTGTGAAGAATGACATTGGAATTTCGTTAGGCATTGCATTGAATCTGAATATCACTTTGGGAAGTATGAATAGTTTAACAATATTCTTGCATTCCATGAATATGGATAGCTTTCCATGTGTTTGTGTCATCTACTATATCTTTCATCAGTGTTTTGTATTTTCTAGTATATACATCTATTGCCTCCTTAAATTTACTTCTAAGTTGCTTTTTCTCGATGCTACTGTAAACGGGATTGAGTTCTTAATTTCTTTTTCAGGTACTTCATTCTTAGAATAGAGAAACACTGTAGATTTTGTATCCTGCAACTTTACTGAATTTGTTTATCAGACTTAATGGTTTTTTGGTGAAGTTGTTAGCATTTTCTATATGTGAGACCATGACATCAGCAAACAGATGATTTCTCTTCTTCCTCTGATATGGATGCCTTTATTTCTTTCTCTTGCCTAATCGCTCTTGCCAGGACATCTAACTCTGTTGAATAGCAGTGGCAAGAGCGGGCATTCTTATCTTGTTTTTGATCATAGAGGAAAAGCTTTTACCTTTTTCCAGGGAGCATGGCAGCTGTGGGCTTGTTACATATGGCCTTTATTGTGTATAAACACAATATATTCCTTCTATACCTAATGTGTTGACAGTTTTTATCATGAAATAATTTTGAGTTGTGTCACATGCTTTTTCCATATCTATTTTTTTTTATTATTATACTTTAAGTTTTAGGGTACATGTGCAAAACGTGCAGGTTTGTTACATATGTATACATGTGCCATGTCGGTGTGCTGCACCCATTAACTCGTCATTTAACATCAGGTATATCTCCTAATGCTATCCCTCCCCACCTCCCCCACCCCACGACAGGCGCCGGTGTGTGATGTTCCCCTTCCTGTGTCCATCTGTTCTCATTGTTCACTTCCCACCTGTGAGTGAGAACATGCGCTGTTTGGTTTTTTGTCCTTGTGATAGTTTGCTGAGAATGATGGTTTCCAGCTTCATCCATGTCCCTACAAAGGACATGAACTCATCATTTTTTATGGCTGCATAGTATTCCATGGTGAATATGTGCCACATTTTCTTAATCCAGTCTATCATTGTTGGACATTTGGGTTGCTTCCAAGTCTTTGCTATTGTGAATAGTGCCGCAATAATCGTACGTGGGCATGTGTCTTCATAGCAGCATATTTTGTAATCCTTTTGGTATATACCCAGTAATGGGATGGCTGGGTCAAATGGTATTTCTAGTTCTAGATCCCTGAGGAATCGCCACACTGACTTCCACAATGGTTGAACTAGTTTACACTCCCACCAACAGTGTAAAAGTGTTCCTGTTTCTCCACATCCTCTCCAGTACCTGTTGTTTCCTGACTTTTTAATGATTGCCATTCTAACTGGTGTGAGATGGTATCTCACCGTGGTTTTGATTTGCATTTCTCTGATGGCCAGTGATGATGAGCATCTTTTCACGTGTCTTTTGGCGGTATAAATGTCTTCTTTTGAGAAGTGTCTGTTCATATCCTTTGCCCACTTTTTGATGGGGTTGTTTTTTTCTTGTAAATTTGTTTGAGTTCATTGTAGATTCTGGATATTAGCCCTTTGTCAGATGAGTAGATTGCAAAAATTTTCTCCCATTCTTTAGGTTGCTGTTCACTCTGATGGTAGTTTCTTTTGTTGTGCAGAAGCTCTTTAGTTTAATTAGATGGCGTTTGTCAATTTTGGCTTTTGTTGCCATTGCTTTTGGTGTTTTAGACATGAAGTCCTTGCCCATGCCTGTGTCCTGAATGGTATTGCCTAGGTTTTCTTCTAGGGTTTTTATGGTTTTAGGTCTAACATGTAAGTCTTTAATCCATCTTGAATTAATTTTTGTATAAGGTGTAAGGAAGGGATCTGGTTTCAGCTTTCTACATATGGCTAGCCAGTTTTCCCAGCACCATTTGTAAAATAGGGAATCCTTTCCCCATTTCTTGTTTTTGTCAGGTTTGTCAAAGATCAGATAGTTGTAGATATGCGGCATTATTTCTGAGGGCTCTGTTCTGTTCCATTGGTCTATATCTCTGTTTTGGTACCAGTACCATGGTGTTTTGGTTACTGTAGCCTTGTAGTATAGTTTGAAGTCAGGTAGCGTGATGCCTCCAGCTTTGTTCTTATGGCTTAGGATTGACTTGGCAATGCAGGCTCCTTTTTGGTTCCATATGAACTTTAAAGTAGTTTTTTCCAATTCTGTGCAGAAAGTCATTGGTAGCTTGATGGGGATGGCATTGAATCTATAAATTACCTTGGGCAGTGTGGCCATTTTCACGATATTGACTCTTCCTACCCATGAGCATGGAATGTTCTTCCATTTGTTTGTATCCTCTTTTATTTCATTGAGCAGTGGTTTGTAGTTCTCCTTGAAGAGGTCCTTCACGTCTCTTGTAAGTTGGAATCCTAGGTATTTTATTCTCTTTGAAGCAATTGTGAATGGGAGTTCACTCATGATTTGGCTCTCTGTCTGTTATTGGTGTATAAGAATGCTTGTGATTTTTGCACATTGATTTTGTATCCTGAGACTTTGCTGAAGTTGCCTGTCAGCTTAAGGAGATTTTGGGCTGAGGCAATGGGGTTTTCTAGATATACAATCATGTCATCTGCAAACAGGGACAATTTGACTTCCTCTTTTCCTAATTGAATACCCTTTATTTCCTTCTCCTGCCTGATTGCCCTGGCCAGAACTTCCAACACTATGTTGAATAGGAGTGGTGAGAGAGGGCATCCCTGTCTTGTGCCCGTTTTCAAAGGGAATGCTTCCAGTTTTTGCCCATTCAGTATGATATTGGCTGTGGGTTTGTCATAAATAGCTCTTATTATTTTGAGATACGTCCCATCAATACCTAATTTATTGAGAGTTTTTAGCATGAAGGGTTGTTGAATTTTGTCAAAGGCCTTTTCTGCATCTATTGAGATAATTATGTGGTTTTACTCGTTGGTTCTGTTTATATGCTGGATTACATTTATTGATTTCTGTATGTTGAACCAGCCTTGCATCCCAGGGATGAAGCCCACTTGATCATGGTGGATAAGCTTTTTGATGTGCTGCTGGATTCGGTGTGCCAGTGTTTTATTGAGGATTTTTGCATCGATGTTCATCAGGGATATTGGTCTAAAATTCTCTTTTTTGGTTGTGTCTCTGCCAGGCTTTGGTATCAGGATGATGCTGGCCTCATAAAATGCGTTAGGGAGGATTTCCTCTTTTTCTATTCATTGGAATAGTTTCAGAAGGAATGGTACCAGCTCCTCTTTGTACCTCTGGTAGAATTTGGCTGTGAATCCGTCTGGTCCTGGACTTTTTTTGTTTGGTAAGCTATTAATTATTGCCTCAATTTCAGAGCCTGTTATTGGTCCATTCAGAGATTCAGCTTCTTGCTGGTTTAGTCTTGGGAGGGTGTATGTGTCCAGGAATTTACCCGTTTCTCCTAGATTTTCTAATTTATTTGTGTAAAGGTGTTTATAGTATTCTCTGATGGTAGTTTGTATTTCTGTGGGATTGGTGGTGATATCCCCTTTATCATTTTTTATTCCGTCTATCTGATTCTTCTCTCTTTTCTTCTTTATTAGTCTTGCTAGCAGTCTATCAGTTTTGTTGATCTTTTCAAAAAGCCAGCTCCTGGATTCATTGATTTTTTTGAAGGGTTTTTTGTGTCTCTATTTCCTTCAGTTCTACTCTGATCTTATTTCTTGCCTCTGCTAGCTTTTGAATGTGTTTGCTCTTGCTTCTCCAGTTCTTTTAATTGGGATGTTAGGGTGTCAATTTTAGATCTTTCCTGCTTTCTCTTGTGGGCATTTAGTGCTACAAATTTCCCTCTACACACTGCTTTGAATGTGTCCCAGAGATTCTGGTATGTTGTGTCTTTGTTCTTGTTGGTTTCAAAGAACATCTTTATTTCTGCCTTCATTTCGTTATGTACCCAGCAGTCATTCAGGAGCAGATTGTCCAGTTTCCATGTAGTTGAGCGGTTTTGAGTGAGTTTCTTAATCCTGAGTTCTAGTTTGATTGCACTGTGGTCTGAGAGACAGTTTGTTATAATTTCTGTTCTTTTACATATGCTGAGGAGTGCTTTACTTCCAAATATGTGGTCAATTTGGAATAGGTGTGGTGTGGTACTGAGAAGAATGTGTATTCTGTTGATTGGGGGTGGAGAGTTCTGTAGATGTCTATTAGGTCCGCTTGGTCCAGAGCTGAGTTCAGTGCCTGGATATCCTTGTTAACTTTCTGTCTCACTGATCTGTCTAATGTTGATAGTGGGGTGTTAAAGTCTCCCATTATTATTGTGTGGGAGTCTAAGTATCTTTGTAGGTCTCTAAGGACTTGCTTTATGAATCTGGGTGCTCCCGTATTGGGTGCATATATATTTAGGATAGTTAGCTCTTCTTGTTGAATGATCCCTTTACCATTATGAAATGGCCTTCTTTGTCTCTTCTGATCTTTGTTGGCTTAAAGTCTGTTTTATCAGAGACTAGGATTGAAACCCCTGCCTTTTTTTGTTTTCCATTTCCTTGTAGATCTTCCTTCATCCTTTATTTTGAGCCTATGTGTGTCTCTGCACGTGAGATGGGTTTCCTGAATACCGCACACTGATGGGTCTTGACTCTTTATCCAATTTGCCAGTCTGTGTCTTTTTATTGGAGCATTTAGCCCATTTACATTTAAGGTTACTACTGTTATGTGTGAATTTGATCCTGTCATTATGATGTTAGCTGGTTATTTTGCTCATTAGTTGATGCAGTTTCTTCCTAGCCTTGATGGTCTTTGCAGTTTGGCATGTTTTTGCAGTGGCTGGTACTGGTTGTTCCTTTCCATGTTCAGTGCTTCCTTCAGGAGCTCTTTTAGGGCAGGCCTGGTGGTGACCAAATCTCTCAGCATTTGCTTATCTGTAAAGGATTTTATTTCTCCTTCACTCATGAAGCTTAGTTTGGCTGGATATGAAATTCTGGGTTGAAAATTCTTGTCTTTAAGAATGTTGAATATTGGCCCCCACTCTCTTCTGGCTTGTAGAGTTTCTGCCGAGAGATCCGCTGTTAGTCTGATGGGCTTCCCTTTGTGGGTAACCCGACCTTTCTCTCTGGCTGCCCTTAACATTTTTTCCTTCATTTCAACTTTGGTGAATCTGAGAATTACGTGTCTTGGAGTTGCTCTTCTCGACGAGTATCTTTGTGGCGTTCTCTGTATTTCCTGAATTTGAATGTTGGCCTGCCTTGCTAGATTGGGGAAGTTCTCCTGGATAATATCCTGCAGAGTGTTTTCCAACTTGGTTCCATTCTCCCTGTCACTTTCAGGTACACCAATGAGACGTAGATTTGGTCTTTTCACATAGTCCTATATTTCTTGGAGGCTTTGTTCGTTTCTTTTAATTCTTTTTTCTCTAAACTTCTCTTTTCACTTCAGTTCATTCATTTCATCTTCCATCACTGATACCCTTTCTTCCAGTTGATCGAATCGGCTACTGAGGCTTGTGCATTCGTCACGTAGTTCTCGTGCTGTGGTTTTCAGCTCCATGAGGTCCTTTAAGGACTTCTCTGCATTGGTTATTCTAGTTAGCCATTCGTCTAATTTTTTTCAAGATTTTTAACTTCTTTGCCATGGGTTCGAAGTTCCTCCTTTAGCTCGGAGTAGTTTGATCGTCTGAAGCCTTCTTCTCTCAACTCATCAAAGTCATTCTCCGTCCAGCTTTGTTCCGTTGTTGGTGAGGAGCTGTGTTCCTTTGGAGGAGGAGAGGCACTCTGATTTTTAGAGTTTCCAGTTTTTCTGCTCTGTTTTTTCCCCATCTTTGTAGTTTTATGTACCTTTGGTCTTTGATGATGGTGACGTACAGATGGGGTTTTGGTGTGCATGTCCTTTGTGTTTGTTACTTTTCCTTCTAACAGTCAGGACCCTCAGCTGCAGGTCTGTTGGAGTTTGGTGGAGGTCCACTCCAGACCTTGTTTGCCTGGGTATCAGCAGCGGAGGCTGCAGAACAGCCAATATTGGTTTATACCAAATGTTGCTGCCTGATCATTCCTCTGGAAGTTTTTGTCTCAGAGGAGTACCTGGCCATGTGAGGTGTCAGTCTGCCCCTACTGGGGGGTCCCTCCCAGTTAGGCTACTCGAGGGTCAGGGACCCACTTGAGGAGGCAGTGTGTCCGTTCTCAGATCTCCAGCTGCATGCTGGGAGAACCACTACTCTCTTCAAAGCTGTCAGACAGGTACATTTAATTCTGCAGAGATTTCTGCTGCGTTTTGTTTGGTTATGCCCTGCCCCCAGAGGTGAGTCTACAGAGGCAGGCAGGCCTCCTTGAGCTGTGGTGCGCTCCACCCAGTTCCAGCTTCCCTGTGGCTTTGTTTACCTACTCAAGCCTTGGCAATGGTGGCTGCCCCTCCCGCAGCCTGGCTGCTGCCTTGCAGTTTGATCTCAGACTGCTGTGCTAGCAATGAGCCAGGCTCCGTGGGCGTAGGACTCTCCGAACCAGTTGTGGGATATAATCTCCTGGTGTGCCATTTGCTAAGACCGTTAGAAAAGCGCAGTATTAGGGTTGGAGTGACCCGATTTTCCAGGTGCTGTCTGTCACTCCTTTCTGTGACTAGGAAAGGGAATTCCATGACCCCTTGCACTTCCCGGGTGAGGTGATGCCTCGCCCTGCTTCGGCTTACGCTGGGTGCACTGCACCCAGTGTGCTGCACCCTCTGTCCAACACTCCCCAGTGAGATGAACCCAATACCTCAGTTGGAAATGCAGAAATCACCCGTCTTCTGCGTCACTCACGCTGGGAGCTGTAGACTGGAGCTGTTCCTGTTTGGCCATCTTGGCTCCACCCCTTTCCATATCTATTCAGGTGATCATATGGATTTTGTCTTCCATTCTATTAACGTGGTGTATCACATTTATTTATTTGCATATGTTGAACCATCTTTGCATCCCAAGGGTAAATCCCACTTGATCATGTGAATGATCCTTTTAATGTGCTGTTGAATTCAGTTTATTAGTATATTGGTGATTTTTGCATCCTTGTTCATCAAAGATGACATGGTAGCTTGGATTACAGGCGCCCGTCACCATGCCCAACTAATTTTTGTATTTTTAGTAGAGACAGGGTTTCACCGTATTGGCCAGGCTGGTCTTGAACTCCTGACCTCAGGTGATCCACCCACCTCGGCCTCCCAAAGTGCTGAGATTACAGGTGTGAGCCACTGCACCTGGCCTGCGGTATTTTCTTTTAGGACATTTAACAGATGTATTTGATTACTGATAAGACTTTCCATATTAAGTTGATAGTACTTTTTATTCTTGTCTGGGTTTTTATAATTTATTTTATTGGTATCTTCCAATAAGCATTTGCTATGGTTTGAATGTCCTCTCCAAAACTCTTGTTGAAATTTAATTACCATGGTGACAGTATTAAAATAGGGGACTAATATAGTTTGAGTCTGTGTCCCCGCCCAAATCTCATGTTGAATTGTAATTTCCATTGTTGGAAATGGGGCCTGGTGGAAGGTGACTGGATTATGGGAGTGGATTTCTCATGAATGGTTTAGCACCAAAACCCTTGGTACTGTCCTCACAATAGTGAGTGAGTTCTTATGTGAGCTGATAATTTAAAAGTGTGTAGTGGTCAGGCACTGTGTCTCCTGCCTGTAACCCCAGCACTTTGGGAGGCCAAGATGGGAGGATCAGTTGAGCCCAGGAGTTTGAGACCGACCTGGCCAACATAGCAAGACCTCGTCTCTATTAAAAAAAATTAAAATAAATAAATACGTAAAAGTGTGTAGTACTGCCCACTTTGCTCTCTTGCTTTCACCATGTGAAGTGTCTGCTTCCTCCTCCCCCTGCTTTCACCATGTGAAGTGCCTGCACCCACTTTGCCTCCCACCATGAGTGAAAGCTCCCTGAGGTGTCCCCAGAAGCATATGCCACCATTCTTCCTGTACAGCCTGCAGAACTGTGAGCCAGTTAAACCTCGTCTTTTATAAATTACCCAGTCTCAGGTATATCTTTATACCAATGTGAGAATGGTATACATTAAAAGAATGGTATATATTAAAAGAACCTTTTAATGGTTCCTGTATTAGGATTAGGCCATGAGGGCCTTGCCCTCATGAATAGATTAATATCATTATCACAGTAGTGGGTTTGTTACCACAAGAATGTGTTGTTATAAAAATTTTCTGTCCCTTGCTCTCACCCTCACTTGTCGTTCTGCTTTCTGCCATGGGAAGGTGTAGGACAAAGGTCCTCACCAGGAGCCAGCACCTTGATATTGGAATTTTCAGCCTCCATAACTATGAGAAATAAACTTCTTTTCTTTGTAAGTTACCTATCTTGTGGTATTCTGTTAAAGCAAAGCAAAGTGGACTAAGACACCATACCTACAGAGGGCAGCAGAGACATAGCAGTGAATTCTCATAACCTAATTTTTCAGGAAGTGTGAAGGAAATTGGATTTAGGTGAACTTTGTTATGTCATTCTTATATACTTTATGTAGTGACTCCTATGCAAATACAGGCTAATAGACATAATCAATGTAAAGTAATGTGAGTGAGACTCAGGCACATTTGTGAGAAGGTAAACAACAAGCTGGCTGGCACAGATAAGAGATCTGAAAGTAGTTCATGTAGTTTTAAAGGAAAAGTAAATGTGGCTTTCAAATTTGAAATACGGATTCATTTTTATGAAACAGATATTTTGTTTGTATTCTTATCAGTAAGGGTAGAAAAAATGATTCAGTAACTCATAGAAGATGGAATTACGGAAAAGTTTAAAAAAACAGGAATAAACAAAATTTTGTACTACATGGGAGTGTATTATAATCTTGCAGAAAGTGATCTGACAAACCTTTAAAAACATTTCTAAATTTAATGTGCATATGTATAATTTTCTGTATTTTTACTTATTTATATAAATTTTTGAAAATCAGTTTTGCTTTTAATCGGTTTTAATAGTGAGTTAGAATAAAATGATATGACTAGATGTGTACTAATTGTTAATGCCTAAGAACTGCCCATTGTTTTCATCTTTTTTCCCAATGTTTTACATTTTAAAATACACATAACATAAAATTTACTATTTTGACCATTTTAAAATGTGCAATTCAGTGGTATTGAGTATCTTCATAATGTTGTGTAACTACCATCACCACCTTCTATCTCCAGAACTCTTTTCATCTTGTAAAATTGAAATTCTGTACTCATTAAACAGTAACTCCTCCTTCTGTCTTTCCCTAGCTCCTGGCAACCACCATTCTACTTTGTGTATGATTTTGACTACTGTAATTACCTCATATGAATAGAATCATACAGTATTTGTTTTTCTGTGACTGGTTTATTTCACTTAGCATAATATCCTTAAGGTTAATCCATGTTGTTAGAATTTTTTATTTTTATTTTTTGAGATGGAGTCTCACTCTGTTGGCCAGGCTGGAGTGCAGTGGTGCGATCTTGACTCACTGCAACCTCCGCCTCCTGGGTTCAAGTGATTGTTGTGCCTTGGCCTCCTAGTATCTGGGATTATAGGCGCACGCCACCACGCCTAGCTAATTTTTGTATTTTTACTAGAGACAGGGCTTCACTATGTTGGCCAGGCTGGTCTTGAACTCTTGACCTCAAGTGATCCGCCCACCTCAGCCTCACAAAGTGCTGGGGTTACAGGCATGAGCCACCGAGCCCGGCTAGAATTTCCTTCTTTTTAAAGGCTGAATAATATTCCATTGTATGTTTATACCACATTTTTTACTTAATTTGTGACCTAACATATGGTCTATCCTGGAAAATGTTCTATATTCACTTGAGAAGAATATGTATGCTATTGTTGGGTACAGTGTTGTGTATATGTCTGTCAGATCTAGTTGGTTATTGTCTGAGGTCCTCTGTTTCCTTACTTATCTTCGATCTGGTTATTCTATCCACTATTGAAAGTAGGGTATTGATTTAATCATCTGTTATTTAGAAAGGTCTGTTTCTCCCTTCAGTTGTCTGTTTTTCCTTCATGTATTTTTGAGGTCTTTTAATTGGTGCATAAATGTTTATAATTTTTGTCTTCTTGTTGTATCAAATCATGTATTCATATATAATGTCCTTTGTCTCTTGTAACCTTTTTTGATTTAGACTGTTTTCTCTGTTGTTAGTATAGCCACCTCTACTCTGTTCTGGTTAGTATTTGCATGGAATATCTTTTTCTGTCTTTTAATTTTCAAACTGTGTCTGTCAGTCTAAAGTAAGTCTAGTATAGGCAACATATGGTTGAATCCTCCTCCATTCTGTCAATCTCTGTCTTTTGATTGGAGAGTTTAATCCATTTGAATTTAAATTATTTGTACAGAAGGATTTCTGTCATTTTGTTGTTTGTTGTTTACATAACTTACTGCTTTTTGTGGGGGCCCTCATTTCCTGCATTACTGTCTTCTTTTGTGTTTACTTGATTTTTTTCATGAAATGTTTAAATTCCTTTCTTCTTTCTTTCTTCTTTTTTTTTTTTAATGGAGTCTCTATCGCCCAGGCTGGAGTGCAGTGGCATGATCTTGGCTCACTGCAACCTCTGCCTCCTGGGTTCAAGCAGTTATCCTGCCTCAGCCTCCTGAGGCTGGGATTACAGGCATGTGCCACCACGCCTGGCTCATTTTTGTATGTTTAGTAGAGATGGGGTTCCACAATGTTGGCCCAGCTGGACTCGAACTCCTGACCTCAGGTGATCCACCCACCTTGGCCTCCCAAAATGCTGGGATTACAGGTGTGAGCCACCGCACCCAGCCTCTTTTCTCATTTCGTTTTTTTTTTTTTTTTTTTTTTTGAGACAGAGTCTCACTCTGTCACCCGAGCTGGAGTGCAGTGGCACAGTCTCAACTCACTACAACCTCTGCCTCCCGGGTTCAAGCGATTCTCATGCCTCAGCCTCCCTAGTAGCTGAGATTACAGGCGTGTGCCACCATGCCCGGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTTGCCATGTTGGCCAGGCTGGTCTCAAACTGCCAACCTCAGGTGATCTTCCCGCCTTGGCCTTCCATAGTGCTGGGATTACAGTCATGAGCCACTGTGCCCGCCCTAGTACTTTGAACAACTTTAAAACAGTTGTCATAAAGTCTTTCTCTGGAAGGTCTGCCATCAGGTCTTTTTCAAGGACAGTTGTGTTGTTTTATTTTTTTTTCTTTTGAATGTGTCATACTTTCCTGTATATCTTGTTATTTTTTTGTTGAAAACAGGGCATTTGAATATAATGATGTGGTAAGTCTGGAAATTAGATTCTCCCTCTTCCCCAGCATTTGCTGTTTGTTTTGTTTTGTTTTGAGGCAGAGTCTCACTCTGTTGCCCAGGCTGGAGTGCAGTGGTGTGATCTCGGCTCACTGCAACCTCTACCTCCTGGGTTCAGCCGATTCTCCTGCCTCAGCCTCCCAAGTAGCTGGGATTACAGGTGTGTGCCACCATGCCCAGCTAATTTTTGTGCTTCTTAGTAGAGATGGGGTTTCGCCATGTTGCCCAGGCTCGTCTCAAACTCCTGACCTCAGGTGATCTGCCCACCTCAGCCTCCCAAAGTGCTGAGATTATAGGCATGAGCTACCATGCCCGGCCTGCTGTTTTTTTTTTTTTTTTCTAATGTTACTGTTTTTGTTTATTTTTATTGTTTGAGGCTTGTCTGTATGTGAAGGATCAGCCTGAGGTGTAAGCTTAAGATTCTCTGAGTCTTTTCTAAGCCTGAGTTTTTCTCCAGGAATGTGCAGGAAGTTTCTAATTTTTCCCTTATATACAGTTGCTTTCAAATGCCGTAGTCTTTAACATCTGACTCCCAAAAGGGAAAAAGAGAAAAACTAAATCCTTTAAATCCCCAGCAGTTACTTTGTGGGTGGGGGTGGGGATGGGGGTGGGAGAGGGCTTGTAACAGTGAGTGGAGATGAAGCAACAATGTGTGTCCACCTCTTTGTCCCATTTCTGTGATCAGAAGTAGCATTCAGTGATCAGGGCACACATGCCCTATATTTGGAAGAGAGGGTCCTTTTTGCCTGTCCTTGGTTCCTGTAAGCTGCGCGCAAGCTGCTCCTTGGAATGCATGCACAACTGCCTGCCTTGGGGCTGAGGGTGGCAAATGGATAGCTGCTACTGTGCTAGTGCTAATACCTGCAAGTGATTAAAATTATATTCAGGCCTTCCCCTGGACATTAACAAGCCTTCAGTAGATTCCAGAGTTTCAAAATAGTTAAATAGAACAGATTCTGCCAGTGCAATGATCTTCTAGGTGGAGCAACACATGCGTGGTGCTTCCTACTCCACCATCTTCCCAGAATCCTCTGATTGCGTATAAGTTACCTATAGTTGAAAGAGTTTAATTCTGATCATCATACATTTTAGAAACCTCTCATATATGTTTATATAAAAACTGATAAAATTTAGTGCTTGTAAAGGGAAATCTGGAGTTCTTAGTCAAGCTTTTTGTATGATTATATTTTAAAGATTTAATTATAGAAACATTGTACTGAAGTCTATATTCCAGTGTGTTCTTATGGTAAAAAGAAAAGGTTGGAGATTTTATTGAGGAGTCTGTATTTTTTTACTGTTATTTTATATTATAACTCATGTATTATATACTGTATCTGTTCATTATCTTAGTATAGCATTTTCGGGCTTTTATTCTCTTTATGAAAGTGAGTAA"
    "CTGTAGGTACCAATATCAATTGTTGCATCTGTGCCAGAAATTATATTTTATCTTTTCATCATCTCCCTTCTTGTATAGCTGAACTTTAGCTTAAAAGATGCCAGGACAAGGAGTTTGTCAGATTGTTCCTTTTCTTTGCATGAACCTTCTTCCCCTTTCAGTATCACTGGGTCATCTTATTTCCCTTCATTCCCCTCTTTCTTCTCCATCTTTTCATTTCCCAAATACTTCTGTTTTCTGATATAAGAAGGACTATAACAGAAAATGATTGCTTTAGGAAATATTGTTACAACTGTGTAATGTTAAAAAGTAGTAAGTTGGCCAGGCACAGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCTGAAGTGGGCGGATCACGAGGTCAGGAGGTCAAGACCATTCTGGCTAACACAGTGAAACCCTGTCTCTAAAGAATACCAAAAAAAATTAGCCGGACATGGTGGCGGGCGCCTGTAGTCCCAGCTACTCAGGAGGCTGAGGCAGGAGAATGGCGTGAACCCGGGAGGCAGAGCTTGCTGTGAGCCGGGATTGCACCACTGCACTCCAGCCTGGGCGACAGACTCTGTCTCAAAAAACAAAGTAATAAGTCGGCCAGCGCTGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCAGGCAGATCACGAGGTCAGGAGATTTGAGACCATCCTGGCTAACACAGTGAAACCCCGTCTCTACTAAAAATACAAAAAATTAGCCGGGCGTGTTGGTGGGCGCCTGTAGTCCCAGCTACTCGGGAGGCTGAGGCAGAAGAATGGTGTGAACCCAGGAGGTGGAGGTCGCAGTGAGCTGAGATCGCGCCGCTGCACTCCAGCCTGGGTGACAGAACGAGACTCCATCTCAAAAAAAAAAAAAAAAAAAAGTCACTATGGATGTCACTTTTGTAGTCTTCTGGTATTATAAACAATTCTTTGGAGTTGTGCTTTTAATAATTACAGAGGGGCACATGTCGGACTACCTTTCCTGAAAATAACAATGACAACTTTTGGACAAAATATAAAAAAAGTATGTGAAAGCACAGTAGGAGGACAGAAAGTAGGAAGAAACTGAAGGATGTTGACATTTGGAAGATAGAATGGTATAAGATGAGCATTTCATTTTTTGTGGATGTTTCCCAGAGGACAGAACTCGGTCATTGGTTGTGTAGGTGACGGAAGCTTGAATAAAAACCACAAGACAGAGTTAGGGGTGACTCTAGCAGCTAGAAAGTTAGTGAGTATAAAGTAGTCTTTCATAAAGAAGGGTGTCCCAAATTCTGCATAAAAGTCTTAGGCTAAAATAACTAAAGATATTTCATTTGCACAAGAAAGAGTTCAGAGGTGTATAGCCAACTTACCTACCTATTAAGCAAAAAAAAACTAAATAGTCTTCAGAAGAACATAATCAAATCCAGAGTTTCTAAAAATGTACTATGCACAGTGTCCAGAATACAATCCATATTCAGTAGACACACACATACACAAACAGAAAAATGTGACCCATACTTAAGTGAAAAGCCAATTAATTGAGACTGGCCTTGATATGACTCCTATGTTAGAATTAGCAGCTGTTATAACTCTTCTTAAGGTTATATAAAGAAAATATGTACACCATGAATAAACAGATAAGAAACCTCAGCTGAAAAATGGAAACTAGGTAAAAG"
    "GACTAAATGAAAATTCTATAGGTAAAAAATACAATATTTCAAATGAAAACTGATTAGAGATTACAGAAGATTAGGAAAAGAAAAGGAGTCATTGAAGTTGTTGGATTCATAGAAGTTATTCTTTCTTAAAAAGTGAAAAAGAGATTTCAAAAAATGAAGCTAGCCTCAGTGGCTGGTAGGACAATATCAAAAGGTCTAACACTTGGAGTCCTAGAAATAGAGGCCAGGGGAAATTGGGTCAAAAAATTCTGGAGAAATTATGGCTGGAAATTTCCCTAAATTGGTAAAAAACATGAATTTACATGTTGAAGAAGTTCAGTGAATTCCAAACAAGATAAATACAATAAAATAACACTTAAGTACATTATAGTGAAGCTGTTGAAAATAATAGACAAAAAATCCTGCCTAGTTGCAGTGGCTTATGCCTGTAATGCCAACACTTGGGGAGGCCAAAGAGGGGTATTGCTTGAGCTAAGGAGTTTGAGACCAGCCTGGGAAACGAAGTGAGACTTCATCTCTACAAAAAGAAAAAAATCTTGAAAGCACCCTGAGAAATGCTAATGAATGGTAGCTGACTTCTTTTTTTTTTTATATTATTATTATACTTTAAGTTTTAGGGTACATGTGCACAATGTGCGGGTTTGTTACATATGTATACATGTGCCATGTTGGTGTGCTGCACCCATTAACTCATCATTTAACATTAGGTATACCTCCTAATGCTATCCCTCCCCACTTCCCCCATCCCACAACAGTCCCCGGAGTGTGATGTTCCCCTTCCTGTGTCCAAGTGTTCTCATTGTTCAGTTCCCACCTATGAGTGAGAACATGCGGTGTTTGGTTTTTTGTCCTTGCGATAGTTTGCTGAGAATGATGGTTTCCAGTTTGATCCATGTCCCTACAAAGGACATGAACTCTTCATTTTTTATGGCTGCATAGTATTCCATGGTGGATATGTGCCACATTTTCTTAATCCAGTCTATCATTGTTGGACATTTGGGTTGGTTCCAAGTCTTTGCTATTGTGAATAGTGCCGCAGTAAACATAGGTGTGCGTGTGTCTTTATAGCAGCATGATTTATAGTCCTTTGGGTATATACCCAGTAATGGGATGGCTGGGTCAAATGGTATTTCTAGTTCTAGATCCCTGAGGAATCGCCACACTGACTTCCACAATGGTTGAACTAGTTTACACTCCCACCAACAGTGTAAAAGTGTTCCTGTTTCTCCACATCCTCTCCAGCACCTGTTGTTTCCTGACTTTTTAATGATCACCATTCTAACTGGTGTGAGATGGTATCTCATTATGGTTTTGATTTGCATTTCTCTGATGGCCAGTGATGGTGAGCATTTTTTCATGTGTTTTTTGGCTGCATAAATGTCTTCTTTTGAGAAGTGTCTGTTCATATCCTTCACCCACTTTTTGATGGGGTTGTTTGTTTTTTTCTTGTAAATTTGTTTGAGTTCATTGTAGATTCTGGATATTAGCCCTTTGTCAGATGAGGTAGGTTGCGAAAATTTTCTCCCATTTTGTAGGTTGCCTGTTCACTCTGATGGTAGTTTCTTGTGCTGTGCAGAAGCTCTTTAGTTTAATTAGATCCCATTTGTCAATTTTGGCTTTTGTTGCCATTGCTTTTGGTGTTGTAGACATGAAGTCCTTCCCCATGCCTATGTCCTGAATGGTATTGCCTAGGTTTTCTTCTAGGGTTTTTATGGTTTTAGGTCTAACATTTAAGTCTTTAATCCATCTTGAATTAATTTGTGTATAAGGTGTAAGGAAGGGATCCAGTTTCAGCTTTCTACATATGGCTAGCCAGTTTTCCCAGCACCATTTATTAAATAGGGAATCCTTTCCCGAAAACTGGCACAAGACAGGGATGCCCTCTCTCACCACTCCTATTCAACATAGTGTTGGAAGTTCTGGCCAGGGCAGTCAGGCAGGAGAAGGAAATAAAGGGTATTCAATTAGGAAAAGAGGAAGTCAAATTGTCTCTGTTTGCAGATGACATGATTGCATATCTAGAAAACACCATCATCTCAGCCCAAAATCTCCTTAAGCTGATAAGCAACTTCAGCAAAGTCTCAGGATACAAAATCAATTTGCAAAAATCACAAGCATTCTTCTAGACCAATAACAGACAAACAGAGAGCCAAATCATGAGTGAACTCCCATTCACAATTGCTTCAAAGAGAATAAAATACCTAGGAATCCAAACTTACAAGGGACGTGAAGGACCTCTTCAAGGAGAACTACAAACCACTGCTCAATGAAATAAAAGAGGATACAAACAAATGGAAGAACATTCCGTGCTCATGGGTAGAAAGAATCAATGTCGTGAAAATGGCCATACTGCCCAAGGTAATTTATAGATTCAATGCCATCCCCATCAAGCTACCAATGACTCTCTTCACAGAATTGGAAAAAACTACTTTAAAGTTCATATGGAACCAAAAAAGAGCCCGCATTGCCGAGTCAATCCTAAGCCAAAAGAACAAAGCCGGAGGCATCACGCTACCTGACTTCAAACTATACTACAAGGCTACAGTAACCAAAACTGCATGGTACTGGTACCAAAACAGAGATATAGATCAGTGGAACAGAACAGAGCCCTCAGAAATAATGCCACATATCTACAACCATCTGATCTTTGACAGACCTGACTTCTTATCAGAAATAATGCAGGCCAGCAGGCTATAAACACCTTTAAAGTACTGGGAAAATAAAAATCAACTCAGAATTCTGTAGCCAAATAAGAAAACATACTTTCTAGCTAAGAAAATCTTTATACTACAAGAAATGTTTAAGGAGATACTTCAAGCTGAAGGAAAGTGTTACCAGCTGAAACTCAGAACTTCAGGAATGAAGAGCACTGCAATTGGTAAAAATGTAAGTCTTCCCCACTCCATTAAGAAATATACAGTTGTGACTGTTTAAAGCAGAAATTATAATGTTACAATATGGCATTTATATATGACTGCTGTGTATAAAGGATGAGTCTAGGTTGATGGAGCTGTGTGCTTACTGTGGTCTTTATTTTATGAAGGGGTAGAATTAGCTTTAAGTACACTGCAAAGTTAAAGATATACATTATAATTCCTAGAACAAACACTGGAAAAGAAAAAAATGCAAAGAGGTGATAACTAAAAAACAAGAGAAGTCAAAATGGAATTCTGAAATGTATTTAGAGAAAATGAAAAAAGGTATAAAGGAAGGAACAGCAGAATATAAAACAAATGAGATGTGTGTCAGTCTGTTCTCATACTGCTAATAAAGACATACTCGAAACTGGGTAATTTATGAAGGAAAGAGGTTTAATTGACCCAGTTCAGCATGGCTGGGGAGGCCTCAGGAAACTTACAATCATGGAGGAAGGGGAAGCAAACATGTCCTTCACAGGGTGGCAGCAAGGAACAGAATGAGAGCAAAGTTGGGGGAAAGCCCCTTATAAAACCATCAGATCTCCTTAGAACTCACTCATTATCACGAGAATAGCATGAGGGTAACTGCTCCATGATGCAGTTACCTCCCACCAGGTCCCTTCCACGACGTGTGAGGATTATGGGAACTACAATTCAAGATGAGATTTGGGTGGAGACACAGCCAAACCATATCAGGATGTAAAGAAAACAAATAGCAAACTTACAAACCTAGGTCAGGTCTATGAATAATTACCTTAATTGAAAATAGATTAAGTGTTTTATTTGAAGGTAGAGATTCATACATTGGATAGAAAACAAGACTTCCTGTATTCTGTCTACCAGAGATGCATTTTAAAAATAATGACACAGATAGATTGAAAGTAAATGTATGAGGAAAGGTGTAGCATGCAAACAGTAAGTATAAGATGGAGTTGTTATATTAATATTAGATAAGTAGACTTCAAGACAGTACTGGAGATAAAGAAGGGTATTTCATAGTGATAAAACTCATTAGAAATACATAGTAATCATAAATTTGTATATACCTAATAAGATCTACAGTCATAGGTGGAAATTTTAACACTACTCTGTAACTTATAGAAAACCTAGACAAAAAATCAGTTAGAATATAGAAGATCTGTAAAAATACTTCAGCCACCTTGACCTAACTGACATTTGTAGAATATCATGGGCAACTAAAATAGAGTGTACATTCTATTCAAGTACACATGATATGCATACCGAGATAAATAATATATGGGTCCTAAAACATGTCTCACTACATTTCAAAAGTTTGAAATCCTAAAGAGTATACTCTGTAACTACAGTAGAATTTAAAGTAGAAACCAATAGCAATAAGATATTCAGGAAAAATCTGAATATTTGGAAGTTAAACAGCACAGTTATCCCTAGTCGATCTATGAATTTAATGTGGTTCAAATCATTTTCTTAGCAGGACTTTTCTCTTTTGGTAGAAATTGACAAGCTGATTATAACGTTTATATGAAGATAGAAAGGACCTATGTTATACAAAGCAATCCTGATGATTTACAAGGTGGAAAACTTAAATTTCCTTATTTCAAGATTTACTCTAATAATACAGTAATGAAGACTGTGATATCAGCATAAGGATATAAAAGCATATAAATGGAGCAGAACAGATAACTGATAAATTATTTTTAACAAAGACAGCTATCCAATGAGGGAAAAGAAAGGCTTTTAAATAAAAAGTGCTGGAACAACTAGACATCTGTATGGATGAAAGTTCACCTTGACTCCCTACCTCACATGGTACCCAAAAGATAAATCAAGATGAATCATAGATCTATATGTTGAAGCTAAAGTATAAAGCTTTTAGAATAAACAAAGAACAGGCAAAGGTTTCCTTGATAGGATACAGAAAGCAGCAACTGTTTTAAAGAAAACACCTAACACTCTATAAACTTCTTCAAAATAAAAAACTTCTGCTCATTAAGAGACATGAAGAAAATAATAGCAAAACCTGTATCTGTAAAGGACTTGTATTAAGACTATGTAAAGAAATTCTACAACTGAACAATGAAAATACAACTTGATTAATTGGAGAAGGATTAGTACACACACTTCATAAATGATGCTATATTGAATGGCCAGTGAACACATGAAAATGTTACTAAACATCGTCAATTATTAAGGAAATACAAAAGTAAACTGCAAGGAGGTGCTGCTTTACTTGTCCCATTAGCTTAAAGAGTAATACTACCATATATGTAGAGCAATGAGAACTCTTATAAAATTAAGAGTTTTTCTACCCTAACCCATGACTTAGCAATTCTACTCCTAGTTATTTACTTAATAGAAAAAGAAAACACATCTACAAGATTTGTTCAAAAGTGTTTATAATAGGCCGAAACTGGACACAGCTCATATACCCACCAGTTGGAGACTGGATCAACAAATAGGTATAGTCATAAATGGAATACAACTTAGCAATGATAAGGAACACTGTCTTGGTACATCAACAACATAATGAATTTCAAATACATGGTAGGTGAAAGAAACCTTACACAAAAGAGTACATTCTGTATTCCATTTACATCGAGTTCTAGAACAGGCAAAATTGATACATAATGGAAGAAAAAGCAGTGCTGTCTTCGATAGTGGGGTGGGGATTAATTGCGAAAAGTCTTAGAGGAACTTGCTGGGTGATAGGAAGTATTTTATTTCTTGTTTGGAGTTTGAGTTCAGTGCTATATGTATATGTTAAAACTTATCAAATGGTGTGTCTTTTATTGTATATAAAACCTACTGAAAAAAGTAAATACATATTAATAGAAATATACATTGAATTCTTGTTATTGATGTTCATGCTGAGATATAATGGGATGATGTGTACTGTCATCTGCAACTTTGAAATGCATCGAAAAGTAAGATGGATTGGTGGAGCCAAGATGGCTGAATGGGAACAGCTCCAGTCTAGAGCTCCCAGCTTGAGCGACGTAGAAGACGAGTGATTTCTGCATTTCCAACTAAGGTACTGGGTTCATCTCACTGGGGAGTGTCGGAAAGTTGGTGCAGGACAGTGGGTACAGTGCACCCAGCGTGAGCCGAAGCAGGGCGAGGCATCACCTCACCCAGGAAGCGCAAGGGGTCAGGGAATTCCCTTTCCTAGATGGAGAAAGGGATGACAGATGGCACCTGGAAAATTGGGTCACTCCCACCCTAATACTGCGCTTTTCCAATGGTCTTAGCAGATGGCACACCAGGAGATTGTATCCCACGCCTGGCTCGGAGGGTCCTACACCTGCGGAGCCTCGCTCATTGCTAGCACAGCAGTCTGAGATCAAACTGCAAGGCAGCAGCGAGGCTGGGGGAGGGGCGCCCACCATTGCCAAGGCTTGAGTAGGTAAACAAAGCCACAGGGAAGCTGGAACTGGATGGAGCCCACCACAGTTCAAGGAGGCCTGCCTGCCTCTGTAGACTCCACCTCTGGAGGCAGGGAATAACCAAGCAAAAGGCAGCAGAATCCTCTGTAGACTTAAATGTCTGCAGCTTCGAAGAGAGTAGTGGTTCTCCCAGCACGCAGCTGGAGGTCTGAGAACAGAAAGACTGCCTCCTCAAGTGGGTCCCTGACCCCCCCGAGTAGCTTAACTGGGAGGCACCCCCTAGTAGGGGCAGACTAACACCTCACATGGCCGGGTACTCCTCTGAGACAAAACTTCCAGAGGAACAATCAGGCAGCAACATTTCCTGCTCACCGGTATCCGCTGTTCTGCAGCCTCCACTGCTGATACTCAGGGAAACAGGGTGTGGAGTGGACCTCCAGCAAACTCCAGCAGACCTGCAACTGAGGGTCCTGACTGTTAGAAGGAAAACTAACAGAAAGGATATCCACTCCAAAACCCCATCTGTACGTCACTATCATCAAAGACCCAAAGGTAGATAAAACCACAAAGATGGAGAAAAAACAGAGCAGAAAAACTGGAAACTCTAAAAATCAGAGTGCCTCTCCTCCTCCAAAGGAACACAGCTCCTCACCAGCAACGGAACAAAGCTGGACGGAGAGTGACTTTGACGAGTTGAGAGAAGAAGGCTTCAGACGATCAAACTACTCCGAGCTAAAGGAGGAAGTTCGAACCCATGGCAAAGAAGTTAAAAACCTTGGAAAAAAACGAGACAAATGGCTAACTAGAATAACCAATGCAGAGAAGTCCTTAAAGGACCTCATGGAGCTGAAAACCACAGCATGAGAACTACGTGACGAATGCACAAGCCTCAGTAGCCGATTCGATCAACTGGAAGAAAGGGTATCAGTGATGGAAGATGAAATGAATGAAATGAAGTGAGAAGAGAAGTTTAGAGAAAAAAGAATTAAAAGAAACGAACAAAGCCTCCAAGAAATATAGGACTATGTGAAAAGACCAAATCTACGTCTCATTGGTGTACCTGAAAGTGACAGGGAGAATGGAACCAAGTTGGAAAACACTCTGCAGGATATTATCCAGGAGAACTTCCCCAATCTAGCAAGGCAGGCCAACATTCAAATTCAGGAAATACAGAGAACGCCACAAAGATACTCGTCGAGAAGAGCAACTCCAAGACACGTAATTCTCAGATTCACCAAAGTTGAAATGAAGGAAAAAATGTTAAGGGCAGCCAGAGAGAAAGGTCGGGTTACCCACAAAGGGAAGCCCATCAGACTAACAGCGGATCTCTCGGCAGAAACTCTACAAGCCAGAAGAGAGTGGGGGCCAATATTCAACATTCTTAAAGACAAGAATTTTCAACCCAGAATTTCATATCCAGCCAAACTAAGCTTCATGAGTGAAGGAGAAATAAAATCCTTTACAGATAAGCAAATGCTGAGAGATTTGGTCACCACCAGGCCTGCCCTAAAAGAGCTCCTGAAGGAAGCACTGAACATGGAAAGGAACAACCAGTACCAGCCACTGCAAAAACATGCCAAACTGCAAAGACCATCAAGGCTAGGAAGAAACTGCATCAACTAATGAGCAAAATAACCAGCTAACATCATAATGACAGGATCAAATTCACACATAACAATATTAACCTTAAATGTAAATGGGCTAAATGCTCCAATAAAAAGACACAGACTGGCAAATTGGATAAAGAGTCAAGACCCATCAGTGTGCGGTATTCAGGAAACCCATCTCATGTGCAGAAGACACACACAGGCTCAAAATAAAGGATGGAGGAAGATCTACCAAGGAAATGGAAAACAAAAAAAGGCAGGGGTTTCAATCCTAGTCTCTGATAAAACAGACTTTAAACCAACAAAGATCAAAAGAGACAAAGCAGGCCATTATGTAATGGTAAAGGGATCAATTCAACAAGAAGAGCTAGCTAGCCTAAATATATATGCACCCAATACGGGAGCACCCAGATTCATAAAGCAAGTCCTTAGAGACCTACAAAGATACTTAGACTCCCACACAATAATAATGGGAGACTTTAACACCCCACTATCAACATTAGACAGATCAGTGAGACAGAAAGTTAACAAGGATATCCAGGTATTGTACTCAACTCTGCACCAAGCGGACCTAATAGACATCTACAGAACCCTCCACCCCAAATGAACAGAATATACATTCTTCTCAGCACCACACCGCACTTATTCCAAAATTGACCACATAGTTGGAAGTAAAGCACTCCTCAGCAAATGTTAAAAGAACAGAAATTATAACAAACTGTCTCTCAGACCACAGTGCAATCAAACTAGAACTCAGGATTAAGAAACTCACTCAAAACTGCTCAACTACATGGAAACTGAACAACCTGCTCCTGAATGACTACTGGGTACATAACGAAATGAAAGCAGAAATAAAGATGTTCTTGGAAACCAACGAGAGCAAAGACACAACATAACCAGAATCTCTGGGACACATTCAAAGCAGTGTGTAGAGGGAAATTTATAGCACTAAATGCCCACAAGAGAAAGCAGGAAAGATCTAAAATTGACACCCTAACATCACAATTAAAAGAACTAGAGAAGCAAGAGCAAACACATTCAAAAGCTAGCAGAAGGCAAGAAATAACTAAGATCAGAGCAGAACTGAAGGAAATAGAGACATAAAAAACCCTTCAAAAAATCAGTGAATCCAGGAGCTGGTCTTTTGAAAAGATCAACAAACTTGATAGGCTGCTAGAAAGATTACTAAAAGAGAAAAGAGAGAAGAATCAAATAGATGCAATAAAAAATGATAAAGGAGATATCACCACTAATCCCACAGAAATACAAACTACCATCAGAGAATACTATAAACACCTCTACGCAAATAAACTAGAAAATCTAGAAGAAATGGATACATTCCTGGACACATACACCCTCCCAAGACTAAACCAGAAAGAAGTTGAATCTCTGAACGGACCAATAACAGGCTCTGAAATTGAGGCGATAATAATAGCTTACCAAACAAAAAAAGTCCAGGACTGGATGAATTTACAGCCGAATTCTACCAGAGGTACAAGGAGGAGCTGGTACCATTCCTTCTGAAACTATTCCAATCAATAGAAAAAGAGGGAATCCTCCCTAACTCATTTTATGAGGCCAGCATCAGCCTGATACCAAAGCCTGGCAGAGACACAGCAAAAAAAGAGAATTTTAGACCAATATCCCTGATGAACATGGATGCAAAAATCCTCAATAAAATACTGGCAAACCAAATCCAGCATCACATGGAAAAGCTTATCCACCATGATCAAGTGGGCTTCATCCCTGGGATGCAAGGCAGGTTCAACATATGCAAATCAATAAACATAATCCATCATATAAACAGAACCAACGAGTAAAACCACATGATTATCTCAATAGATGCAGAAAAGGCCTTTGACAAAATTTAACAACCCTTCATGCTAAAAACTCTCAATAAATTAGGTATTGATGGGACGTATCTCAAAATAGTAAGAGATATCTATGACAAACCCACAGCCAATATCATAATGGGCAAAAACTGGAAGCATTCCCTTTGAAAACTGGCACAAGACAGGGATGCCCTCTCTCACCGCTCCTATTCAACATGGTGTTGGAAGTTCTGGCCAGGGCAATCAGGCAGGAGAAGGAAATAAAGGGTATTCAATTAGGAAAAGAGGAAGTCAAATTGTCCCTGTTTGCAGATGATACGATTGTATATTTATAAAACCCCATCGTCTCAGCCCAAAATCTCCTTAAGCTGATAGGCAACTTCAGCAAAGTCTCAGGATACAAAATCAATGTGCAAAAATCACAAGCATTCTTATACACCAATAACAGAGAAAGAGAGAGCCAAATCATGAGTGAACTCCCATTCACAATTGCTTCAAAGAGAATAAAACACCTAGGAATCCAACTTATAAGGGATTTGAAGGACCTCTTCAAGGAGAACTACAAACCACTGCTCAATGAAATAAAAGAGGATACAAACAAACAGAAGAACATTCCATGCTCATGGACAGGAAGAATCAGTATCATGAAAATGGCCATACTGCCCAAGGTAATTTATAGATTCAGTGCGATCCCCATCAAGCTACCAATGACTTTCTGCACAGAATTGGAAAAAACTACTTTAAAGTTCATATGGAACCAAAAAAGAGCCGGTATTGCCAAGTCAATCCTAAGGTGAAAGAACAAAGCTGGAGGCATCGTGCTACCTGACTTCAAACTATACTACAAGGCTGCAGTAACCAAAACTGCATGGTACTGGTACCGAAACAGAGATATAGAGCAATGGAACAGAACAGAGCCCTCAGAAATAATGCCACATATCTACAACCATCTGATCTTTGACAAACCTGACAAAAACAAGAAATGGGAAAACGATTCCCTATTTAATAAATGGTGCTGGGAAAAGTGGCTAGCCATATGTAGAAAAGTGAAACTGGATCCCTTCCTTACACCTTATACTAAAATTAATTCAAGATGGATTAAAGACTTAAATGTTAGACCTGAAACCATAAAAACCCAAGAAGAAAACCTAGGCAATACCATTCAGGACATGGGCATGGGCAAGGACTTCGTGTCTAAAACACCAAAAGCAATGGCAACGAAAGCCAAAATTGACAACTAGGATCTAATTAAACGAAAGAGCTTCTGCACAGCAAAAGAAACTACCATCTGAGTGAACAGCAACCTACAGAATGGGAGAAAATTTTTACAGTCTGCTCATCTGACAAAGGGCTAATATCCAGAATCTACAATGAGCTCCAACAAATTTTCAAGAAAAAAACGCCATCAGAAAGTGGTCGAAGGATATGAGCAGACACTTCTCAAAAGAAGACATTTATGCAGCCAAAAGACACTTGAAAAGATGCTCATCATCCCTGGCCATCAGAGAAATGCAAATCGAAACCACAATGAGATACCATCTCACACCAGTTAGAATGGCAGTCATTAAGAAGTCAGGAAACAACAGGTGCTGGAGAGGATGTGGAGAAATAGGAACACTTTTACACCGTTGGTGGGACTGTAAACTAGTTCAACGATTGTGGAAGTCAGTGTGGCGATTCCTCAGGGATCTAGAACTAGAAATACCATTTGACCCAGCCATCCCATTACTGGGTATATACCCAAAGGATTATAAATCATGCTGCTATAAAGACACATGCACACGTATGTTTATTGGGGGACTATTCACAATCGCAGAGACTTGGAGCCAAGCCAAATGTCCAACAATGATAGACTGGATTAAGAAAATGTGGCACATATACACCATGGAATACTATGCAGCCATAAAAAAGGATGAGTTCATGTCCTTTGTAGGGACATGGATGAAGGTGGAAACCATCATTCTCAGCAAACTATCAGAAGGACAAAAAACCAAACAGCGCATGTTCTCACTCATAGGTGGGAATTGAAAAGTGAGAACACAGGGGCACAAGAAGGGGAACATCATACGCCGGGGCCTGTTGTCGGGTGAGGGCAGGGTGGAGGGATAGCATTAGGAGGTATACCTAATGTTAAATGACGAGTTACTGTGTGCAGCAGACCAACATGGCACATGTATACATATGTAACTAACCTGCACATTGTGCGCATGTACCCGAAAACGTAAAGTATAATAAAAAAAGAAGAAGAAGAGAAAAAAAAAAGAAAAGTAAGGTGGATTAATGGATAGAGAAATGTGATAAACTGTCATAGCTAAATAATAACAATTGTAAAGCCTTGGTGATGTATATATTGGTTTTTGCTAGTATCTCTAAAAAATTTCTGGTCGAAATTTGCATAATATTCTGTGTGAAAAATCTTCTCAGGGAACATAGACCTGTGTTATTGTATTTATGTAAGTAGTTGTCATATAATTCTTTTATCTTAGAGAATCTGAAGTTTCCAATGTGAGTGTACAGTGTCTCACCACCACCTGAGTTTATTTCTGGTTGTTGTAATGCAGTACAATTGATAATGAAATTTTTTTGATGTTTTTGCCGTAGACATGGAATGTATAGTGCTCTAGCTTTTACTTTTTGAGAGACAGAAAAAGGCCCTGAGCATTGGTGTTGTGTCAGTCATCCTAGGCTCAGATCTCCATTCTACCTCTCACTGAATGCTTGGCCTTAAGCAGGTATTTAACTTTTTTTTAGATCCAATTGGTTTGTCTGTTAAATGCCTTCAGTAACGTATTCCTCACATAGTTGCTTTGAAGATTGGTGAGTCATGGCACAGCACACAGCTGAACATAGAAGACATTCAAGCAATGCCAGATTCCTTTAGGGTGCAGGTAGACATTCCTAGGGTTTGTAATAGATTTAGAAGTAGAATTAGTCTTCTACTTCTTCAGATCTCCTTTGAGGTCTGAGTGACTACAGAACCCATGGACACCTTTATTTACGAAATGCTGTGTTTCTGGTGTCTAAGGCCTGATTGCATCTTGATTGGAAACTATTAGTTAAACATTTATAAGAAATAATACTGTAACTTTTGTTTAAGCTAAAAATTATTTTCTTGAATTTTAGTTTATTGGTCTTAGTTAATACTATAACCTTTACAGTGCTAAAAAGTTATAATCCAATTGTGTTCTCTGGTGACATTAACTGAAATACATGTTCTTTTCTAGAGACCTTATTCTGTAAATCATAATAAAAAATTTCTTATGAAATTAAGTCTTTATAGATACCTCATTTAATTCTTACCATTCTATTAATAAAATACATTTTTATATTACTTATATGTATTGAGTATCTTGTCTGAAATCACACAACTAGAAAGTAGAAAGTTGTCATTTGAACACAACTCTGTGTGATTCTTAACCTTGTTTTCTTAGCCATTTTGCTGAATGGCCTTTCCTTCTTTCCTCTATCCCCCATCCCCCATCCCCCATTTCCATGTATGTGTCTGTTGTCATTCTCTACTAGCTTTTTCTTCTTATGTACAAATAGGTCAGATGTCTACATTTAAATAAACAGCATCTTTAACCCTGCTGCTCCCATACTCAAGACAAATTGACAAGTATGTTATTATCTGTGCTGTGAAGTGAAATTAGATCTTTTGATTTCAACATCAAAACCTTATAAGATGTTTTATCTTTTTTAGAAGTCCTTAATCACAAGTTAGAGCAATTAACACCTATATTACTAATAATATTTCCAGTAGTATGGATGCTTTGGTTATGGTTAAATGGTTCTGAAATCTACACCTGAGATGCTTCCCTTAAAGGGGCTCTTTGGCCAGTTCACCAATTACTTGGAAGAGGAAGAGGAAGTCTAGGTTGATTATATTGCTTTGAGTTAGAATATCTGAGAAAGTGGTACTTATATTAGTTTGCTAGTGCTGCGATGATAAAGTACTACATACTGGATGGCTTCAATAACAGAACTTTATTTTCTCACAGTCCTAGAGGCTGGAAGATCGTCTGGGACAAGTCCAGGTGCTGGCAGGGTTGATTTCTCCTGAGGCCTCTCTCTGTGGCTTGCAAGGTGGCTGTGTCTTGACATGGCCTCTTCTCTGTGTGTCCCTCCCCCTTCTTATAAGGATGTCAGTCAGATTGGATTAGGGCCCACCCTAACGGCAGCATTTTAACATTCACTTATTTAAAGACCTTATCTCTAAGAACATTACATTCTGAGGACCTGAGACTTTCAGTGTATAAATTTGGGAGGACACAATTTAGCCTATAATAGTGCTATAAAGAGAAGTTCAAAAATGAAGATGGAGATTTTATTTTTTAAGCAAAAAAATAAGTTTG"

)

import datetime



def showInfo(message, typ='INFO'):
    currentTime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
    msg = f"{currentTime} ({os.getpid()}) [{typ}] {message}\n"
    with open("./gzq.output", 'at') as fp:
        fp.write(msg)
    # if (typ == 'WARN' or typ == 'PROC'):
    #     sys.stderr.write(msg)
    # else:
    #     sys.stdout.write(msg)


# 判断两碱基是否互补
def is_complement(a: str, b: str) -> bool:
    """A-T, T-A, C-G, G-C 是互补配对"""
    return (a == 'A' and b == 'T') or \
           (a == 'T' and b == 'A') or \
           (a == 'C' and b == 'G') or \
           (a == 'G' and b == 'C')

def build_dotplot(query: str, reference: str) -> List[List[str]]:
    """
    第一步：构建 dot-plot 网格
    - 坐标系：x 轴是 query（长度 M），y 轴是 reference（长度 N）
    - 相同：标 'B'（蓝点），互补：标 'R'（红点），否则空字符串
    """
    M, N = len(query), len(reference)
    grid = np.zeros((M, N), dtype=np.uint8)
    for x, qb in tqdm(list(enumerate(query)), desc="build dotplot"):
        for y, rb in enumerate(reference):
            if qb == rb:
                grid[x][y] = 1
            elif is_complement(qb, rb):
                grid[x][y] = 2
            else:
                grid[x][y] = 0
    return grid

def init_diag_tables(grid):
    """
    根据 grid 初始化四个对角线方向的累积计数表：
      main_ld  - 主对角线向左下（i-1, j-1）方向累积
      main_ru  - 主对角线向右上（i+1, j+1）方向累积
      anti_lu  - 副对角线向左上（i-1, j+1）方向累积
      anti_rd  - 副对角线向右下（i+1, j-1）方向累积

    grid: M x N 的字符矩阵，非空字符串表示有色点
    返回 (main_ld, main_ru, anti_lu, anti_rd)，它们都是 M x N 的整数矩阵
    """
    M = len(grid)
    N = len(grid[0]) if M > 0 else 0

    # 初始化四个表
    main_ld = np.zeros((M, N), dtype=np.int16)
    anti_lu = np.zeros((M, N), dtype=np.int16)

    # main_ld: 从上到下、从左到右
    for i in tqdm(list(range(M)), desc="init main diag"):
        for j in range(N):
            cnt = 1 if grid[i][j]== 1 else 0
            if i-1 >= 0 and j-1 >= 0:
                cnt += main_ld[i-1][j-1]
            main_ld[i][j] = cnt


    # anti_lu: 从上到下、从右到左
    for i in tqdm(list(range(M)), desc="init anti diag"):
        for j in range(N-1, -1, -1):
            cnt = 1 if grid[i][j]== 2 else 0
            if i-1 >= 0 and j+1 < N:
                cnt += anti_lu[i-1][j+1]
            anti_lu[i][j] = cnt

    return main_ld, anti_lu
class Segment:
    """表示一个对角线或副对角线上的连续匹配段"""
    def __init__(self, x0: int, y0: int, length: int, direction: str, distance: int):
        """
        x0, y0: 起点坐标
        length: 段长度（点的数量）
        direction: 'main' 或 'anti'
        """
        self.x0 = x0
        self.y0 = y0
        self.length = length
        self.direction = direction
        self.distance = distance
        # 计算终点坐标
        self.x1 = x0 + length - 1
        if direction == 'main':
            self.y1 = y0 + length - 1
        else:
            self.y1 = y0 - (length - 1)

    def __repr__(self):
        if self.direction == "main":
            # return f"({self.x0},{self.x1 + 1},{self.y0},{self.y1 + 1}, {1})"
            return f"({self.x0},{self.x1 + 1},{self.y0},{self.y1 + 1})"
        else:
            # return f"({self.x0},{self.x1 + 1},{self.y1},{self.y0 + 1}, {0})"
            return f"({self.x0},{self.x1 + 1},{self.y1},{self.y0 + 1})"
        
    def update_endpoints(self):
        self.x1 = self.x0 + self.length - 1
        if self.direction == 'main':
            self.y1 = self.y0 + self.length - 1
        else:
            self.y1 = self.y0 - (self.length - 1)

    def update_startpoints(self):
        self.x0 = self.x1 - self.length - 1
        if self.direction == 'main':
            self.y0 = self.y1 - self.length + 1
        else:
            self.y0 = self.y1 + (self.length - 1)

    def recalc_distance(self):
        if self.direction == 'main':
            prev = main_ld[self.x0-1, self.y0-1] if self.x0 > 0 and self.y0 > 0 else 0
            correct = main_ld[self.x1, self.y1] - prev
        else:
            prev = anti_lu[self.x0-1, self.y0+1] if self.x0 > 0 and self.y0+1 < anti_lu.shape[1] else 0
            correct = anti_lu[self.x1, self.y1] - prev
        self.distance = self.length - correct

def find_diagonal_segments(grid: List[List[str]]) -> List[Segment]:
    """
    第二步准备：在主对角线（右下方向）和副对角线（右上方向）上
    寻找所有连续的匹配段（不做阈值过滤）
    """
    M, N = len(grid), len(grid[0])
    segs: List[Segment] = []

    # 主对角线方向（dx=+1, dy=+1）
    for x in range(M):
        for y in range(N):
            if grid[x][y] and (x == 0 or y == 0 or grid[x-1][y-1] == 0):
                # 遇到一个新的段起点
                length = 0
                xx, yy = x, y
                while xx < M and yy < N and grid[xx][yy]:
                    length += 1
                    xx += 1; yy += 1
                segs.append(Segment(x, y, length, 'main', 0))

    # 副对角线方向（dx=+1, dy=-1）
    for x in range(M):
        for y in range(N):
            if grid[x][y] and (x == 0 or y == N-1 or grid[x-1][y+1] == 0):
                length = 0
                xx, yy = x, y
                while xx < M and yy >= 0 and grid[xx][yy]:
                    length += 1
                    xx += 1; yy -= 1
                segs.append(Segment(x, y, length, 'anti', 0))

    return segs



def find_segments_in_range(x_start: int, x_end: int) -> List['Segment']:
    """
    在 query x 范围 [x_start, x_end] 内，提取所有主/副对角线连续匹配段。
    """
    M, N = len(grid), len(grid[0])
    segs = []
    # 主对角线
    for x in tqdm(list(range(max(0, x_start), min(M, x_end+1))), desc="find main diag"):
        for y in range(N):
            if grid[x][y] == 1 and (x == 0 or y == 0 or grid[x-1][y-1] != 1):
                length = 0
                xx, yy = x, y
                while xx < M and yy < N and grid[xx][yy] == 1:
                    length += 1
                    xx += 1; yy += 1

                end_x, end_y = xx-1, yy-1
                if xx-1 > x_end:
                    end_x = x_end
                    end_y = y + (x_end - x)
                    length = end_x - x + 1

                prev = main_ld[x][y] if x>0 and y>0 else 0
                affective_distance = main_ld[end_x][end_y] - prev
                distance = length - affective_distance
                segs.append(Segment(x, y, length, 'main', distance))
                
    # 副对角线
    for x in tqdm(list(range(max(0, x_start), min(M, x_end+1))), desc="find anti diag"):
        for y in range(N):
            if grid[x][y] == 2 and (x == 0 or y == N-1 or grid[x-1][y+1] != 2):
                length = 0
                xx, yy = x, y
                while xx < M and yy >= 0 and grid[xx][yy] == 2:
                    length += 1
                    xx += 1; yy -= 1

                end_x, end_y = xx-1, yy+1
                if xx-1 > x_end:
                    end_x = x_end
                    end_y = y - (x_end - x)
                    length = end_x - x + 1

                prev = anti_lu[x][y] if x>0 and y+1<len(grid[0]) else 0
                affective_distance = anti_lu[end_x][end_y] - prev
                distance = length - affective_distance
                segs.append(Segment(x, y, length, 'anti', distance))

    segs = merge_with_tolerance(segs,
                                    max_gap=5,
                                    max_error_rate=0.095)
    # segs = minimal_interval_cover2(segs)
    # print(segs)
    return segs

# def weighted_interval_scheduling(segs: List['Segment']) -> List['Segment']:
#     """
#     标准加权区间调度，返回不重叠的最大权重集合。
#     """
#     segs = sorted(segs, key=lambda s: s.x1)
#     n = len(segs)
#     ends = [s.x1 for s in segs]
#     p = [bisect_right(ends, segs[j].x0 - 1) - 1 for j in range(n)]
#     DP = [0]*(n+1)
#     choose = [False]*n
#     for j in range(1, n+1):
#         w = segs[j-1].length
#         if w + DP[p[j-1]+1] > DP[j-1]:
#             DP[j] = w + DP[p[j-1]+1]
#             choose[j-1] = True
#         else:
#             DP[j] = DP[j-1]
#     res = []
#     j = n
#     while j > 0:
#         if choose[j-1]:
#             res.append(segs[j-1])
#             j = p[j-1] + 1
#         else:
#             j -= 1
#     return list(reversed(res))
# 在文件开头已经定义过：
# from bisect import bisect_right

# 在一组可选区间 segs中，挑选一组互不重叠的区间，使得它们的总“权重”最大
def weighted_interval_scheduling(segs: List[Segment]) -> List[Segment]:
    segs = sorted(segs, key=lambda s: s.x1)
    ends = [s.x1 for s in segs]
    n = len(segs)
    p = [bisect_right(ends, segs[j].x0 - 1) - 1 for j in range(n)]
    dp = [0]*(n+1)
    choose = [False]*n
    for j in range(1, n+1):
        w = segs[j-1].length
        if w + dp[p[j-1]+1] > dp[j-1]:
            dp[j] = w + dp[p[j-1]+1]
            choose[j-1] = True
        else:
            dp[j] = dp[j-1]
    res = []
    j = n
    while j>0:
        if choose[j-1]:
            res.append(segs[j-1])
            j = p[j-1]+1
        else:
            j -= 1
    return list(reversed(res))



def merge_in_blanks(segs: List['Segment'], rate) -> List['Segment']:
    prev_seg = Segment(0, 0, 0, "main", 0)
    result = []
    for seg in segs:
        if seg.direction == prev_seg.direction:
            new_length = seg.x1 - prev_seg.x0 + 1
            if seg.direction == 'main' and seg.x0-seg.y0 == prev_seg.x0-prev_seg.y0:
                prev = main_ld[prev_seg.x0-1][prev_seg.y0-1] if prev_seg.x0>0 and prev_seg.y0>0 else 0
                affective_distance = main_ld[seg.x1][seg.y1] - prev
            elif seg.direction == 'anti' and seg.x0+seg.y0 == prev_seg.x0+prev_seg.y0:
                prev = anti_lu[prev_seg.x0-1][prev_seg.y0+1] if prev_seg.x0>0 and prev_seg.y0+1<len(grid[0]) else 0
                affective_distance = anti_lu[seg.x1][seg.y1] - prev
            else:
                result.append(seg)
                prev_seg = seg
                continue
            distance = new_length - affective_distance
            if distance/new_length < rate:
                result.append(Segment(prev_seg.x0, prev_seg.y0, new_length, seg.direction, distance))
                if prev_seg in result:
                    result.remove(prev_seg)
            else:
                result.append(seg)
        else:
            result.append(seg)
        prev_seg = seg
    
    return result


# # 对每条对角线在 [x_start,x_end] 范围内做 DP & 区间调度
def find_large_valid_segments_in_range(x_start: int, x_end: int,
                                       rate:float,
                                       min_len: int=30) -> List[Segment]:
    M, N = len(grid), len(grid[0])
    results: List[Segment] = []
    groups: Dict[Tuple[str,int], List[Tuple[int,int]]] = {}
    # 构造每条对角线的点列表 pts，仅保留 x∈[x_start,x_end]
    for d in range(-(M-1), N):
        pts = []
        lo = max(0, -d, x_start)
        hi = min(M-1, N-1-d, x_end)
        for x in range(lo, hi+1):
            y = x + d
            pts.append((x,y))
        if len(pts) >= min_len:
            groups[("main",d)] = pts
    for d in range(0, M+N-1):
        pts = []
        lo = max(0, d-(N-1), x_start)
        hi = min(M-1, d, x_end)
        for x in range(lo, hi+1):
            y = d - x
            pts.append((x,y))
        if len(pts) >= min_len:
            groups[("anti",d)] = pts

    # 对每条线做双指针+DP
    for (direction, d), pts in groups.items():
        L = len(pts)
        mis = [0]*(L+1)
        for i,(x,y) in enumerate(pts):
            if direction == "main":
                mis[i+1] = mis[i] + (1 if grid[x][y] != 1 else 0)
            else:
                mis[i+1] = mis[i] + (1 if grid[x][y] != 2 else 0)
        dp = [0]*(L+1)
        prev_idx = [0]*(L+1)
        L_ptr = 0
        for R in range(1, L+1):
            while L_ptr<R and (mis[R]-mis[L_ptr]) > rate*(R-L_ptr):
                L_ptr += 1
            dp[R] = dp[R-1]
            prev_idx[R] = R-1
            if R-L_ptr >= min_len:
                length = R - L_ptr
                if dp[L_ptr] + length > dp[R]:
                    dp[R] = dp[L_ptr] + length
                    prev_idx[R] = L_ptr
        # 回溯
        idx = L
        while idx>0:
            pi = prev_idx[idx]
            if pi < idx-1:
                start,end = pi, idx-1
                x0,y0 = pts[start]
                length = end-start+1
                errs = mis[end+1] - mis[start]
                results.append(Segment(x0,y0,length,direction,errs))
                idx = pi
            else:
                idx -= 1
    # print("start, end, results = ", x_start, " ", x_end, " ", results)
    return results

# def dedupe_by_start_max_length(segs: List[Segment]) -> List[Segment]:
#     """
#     对 segs 中可能重叠、同一 x0 有多条的段
#     保留每个起点 x0 下长度最长的那个。
#     """
#     best: Dict[int, Segment] = {}
#     for s in segs:
#         # 如果该起点还没记录，或当前段更长，则更新
#         prev = best.get(s.x0)
#         if prev is None or s.length > prev.length:
#             best[s.x0] = s
#     # 返回按起点排好序的、去重后的列表
#     return sorted(best.values(), key=lambda s: s.x0)




# 全局填补空白并合并相邻段
def fill_in_blanks_global(segs: List[Segment],
                          rate: float,
                          min_gap: int=30) -> List[Segment]:
    segs = sorted(segs, key=lambda s: s.x0)
    filled: List[Segment] = []
    for prev, curr in tqdm(list(zip(segs, segs[1:])), desc="fill in black"):
        filled.append(prev)
        g0, g1 = prev.x1+1, curr.x0-1
        gap_len = g1 - g0 + 1
        if gap_len >= min_gap:
            # 子区间 DP 调度（不分方向）
            extras = find_large_valid_segments_in_range(g0, g1, rate, min_gap)
            # extras = find_segments_in_range(g0, g1)
            if extras == []:
                extras = find_segments_in_range(g0, g1)
            filled.extend(extras)
            filled.append(curr)
    if segs:
        filled.append(segs[-1])
    # 最后合并相邻同向段
    filled = merge_in_blanks(filled, rate)
    # filled = dedupe_by_start_max_length(filled)
    final = weighted_interval_scheduling(filled)
    # final = minimal_interval_cover2(filled)
    return final


# 全局填补空白并合并相邻段
def fill_in_global(g0, g1,
                    rate: float,
                    min_gap: int=30) -> List[Segment]:
    filled: List[Segment] = []
    gap_len = g1 - g0 + 1
    if gap_len >= min_gap:
         # 子区间 DP 调度（不分方向）
        extras = find_large_valid_segments_in_range(g0, g1, rate, min_gap)
        # extras = find_segments_in_range(g0, g1)
        if extras == []:
            extras = find_segments_in_range(g0, g1)
        filled.extend(extras)
    # 最后合并相邻同向段
    filled = merge_in_blanks(filled, rate)
    # filled = dedupe_by_start_max_length(filled)
    final = weighted_interval_scheduling(filled)
    # final = minimal_interval_cover2(filled)
    return final

def extend_end_backward(segments: List[Segment],
                          rate: float) -> List[Segment]:
    """
    对每一个 segments 中的 segment：
    - 记住上一个 segment 在 query 上结束的 x_end(prev_end)
    - 如果当前 segment 的 x0 与 prev_end+1 之间有 gap > 1，
      则尝试将当前 segment 的 x0 往前推到 prev_end+1，
      并调整 y0 与 length，确保 error_rate <= rate。
    """
    prev_end = segments[-1].x1 + 1
    new_segs = []
    M, N = grid.shape

    for seg in segments:

        target_end = prev_end - 1
        space = target_end - seg.x1
        if seg.x1 < target_end:
            # 尝试延申结尾位置
            cand_x1 = target_end
            direction = 1 if seg.direction == "main" else -1
            cand_y1 = (seg.y1 + direction * space)
            cand_length = seg.length + space
            # Move start backward step by step
            while cand_x1 > seg.x1:
                # ensure within bounds
                if cand_x1 >= M or cand_y1 < 0 or cand_y1 >= N:
                    cand_x1 -= 1
                    cand_y1 -= direction
                    cand_length -= 1
                    continue
                if seg.direction == 'main':
                    prev = main_ld[seg.x0-1, seg.y0-1] if seg.x0>0 and seg.y0>0 else 0
                    correct = main_ld[cand_x1, cand_y1] - prev
                else:
                    prev = anti_lu[seg.x0-1, seg.y0+1] if seg.x0>0 and seg.y0+1<N else 0
                    correct = anti_lu[cand_x1, cand_y1] - prev
                distance = cand_length - correct
                if distance / cand_length < rate:
                    break
                else:
                    cand_x1 -= 1
                    cand_y1 -= direction
                    cand_length -= 1
            # update seg
            seg.x1 = cand_x1
            seg.y1 = cand_y1
            seg.length = cand_length
            seg.recalc_distance()

        new_segs.append(seg)
        prev_end = seg.x0

    return new_segs

def extend_start_backward(segments: List[Segment],
                          rate: float) -> List[Segment]:
    """
    对每一个 segments 中的 segment：
    - 记住上一个 segment 在 query 上结束的 x_end(prev_end)
    - 如果当前 segment 的 x0 与 prev_end+1 之间有 gap > 1，
      则尝试将当前 segment 的 x0 往前推到 prev_end+1，
      并调整 y0 与 length，确保 error_rate <= rate。
    """
    prev_end = -1
    new_segs = []
    M, N = grid.shape

    for seg in segments:
        # print(seg.x0)
        # 计算 gap
        target_start = prev_end + 1
        space = seg.x0 - target_start
        if seg.x0 > target_start:
            # 尝试延申起始位置
            
            cand_x0 = target_start
            direction = 1 if seg.direction == "main" else -1
            cand_y0 = (seg.y0 - direction * space)
            cand_length = seg.length + space
            # Move start backward step by step
            while cand_x0 < seg.x0:
                # ensure within bounds
                if cand_x0 < 0 or cand_y0 < 0 or cand_y0 >= N:
                    break
                if seg.direction == 'main':
                    prev = main_ld[cand_x0-1, cand_y0-1] if cand_x0>0 and cand_y0>0 else 0
                    correct = main_ld[cand_x0 + cand_length - 1, cand_y0 + cand_length - 1] - prev
                else:
                    prev = anti_lu[cand_x0-1, cand_y0+1] if cand_x0>0 and cand_y0+1<N else 0
                    correct = anti_lu[cand_x0 + cand_length - 1, cand_y0 - (cand_length - 1)] - prev
                distance = cand_length - correct
                if distance / cand_length < rate:
                    break
                else:
                    cand_x0 += 1
                    cand_y0 += direction
                    cand_length -= 1
            # update seg
            seg.x0 = cand_x0
            seg.y0 = cand_y0
            seg.length = cand_length
            seg.update_endpoints()
            seg.recalc_distance()

        new_segs.append(seg)
        prev_end = seg.x1

    return new_segs

def extend_end_backward_err(segments: List[Segment],
                          maxerr) -> List[Segment]:
    """
    对每一个 segments 中的 segment：
    - 记住上一个 segment 在 query 上结束的 x_end(prev_end)
    - 如果当前 segment 的 x0 与 prev_end+1 之间有 gap > 1，
      则尝试将当前 segment 的 x0 往前推到 prev_end+1，
      并调整 y0 与 length，确保 error_rate <= rate。
    """
    prev_end = segments[-1].x1 + 1
    new_segs = []
    M, N = grid.shape

    for seg in segments:

        target_end = prev_end - 1
        space = target_end - seg.x1
        if seg.x1 < target_end:
            # 尝试延申结尾位置
            cand_x1 = target_end
            direction = 1 if seg.direction == "main" else -1
            cand_y1 = (seg.y1 + direction * space)
            cand_length = seg.length + space
            # Move start backward step by step
            while cand_x1 > seg.x1:
                # ensure within bounds
                if cand_x1 >= M or cand_y1 < 0 or cand_y1 >= N:
                    cand_x1 -= 1
                    cand_y1 -= direction
                    cand_length -= 1
                    continue
                if seg.direction == 'main':
                    prev = main_ld[seg.x0-1, seg.y0-1] if seg.x0>0 and seg.y0>0 else 0
                    correct = main_ld[cand_x1, cand_y1] - prev
                else:
                    prev = anti_lu[seg.x0-1, seg.y0+1] if seg.x0>0 and seg.y0+1<N else 0
                    correct = anti_lu[cand_x1, cand_y1] - prev
                distance = cand_length - correct
                if distance <= maxerr:
                    break
                else:
                    cand_x1 -= 1
                    cand_y1 -= direction
                    cand_length -= 1
            # update seg
            seg.x1 = cand_x1
            seg.y1 = cand_y1
            seg.length = cand_length
            seg.recalc_distance()

        new_segs.append(seg)
        prev_end = seg.x0

    return new_segs

def extend_start_backward_err(segments: List[Segment],
                          maxerr) -> List[Segment]:
    """
    对每一个 segments 中的 segment：
    - 记住上一个 segment 在 query 上结束的 x_end(prev_end)
    - 如果当前 segment 的 x0 与 prev_end+1 之间有 gap > 1，
      则尝试将当前 segment 的 x0 往前推到 prev_end+1，
      并调整 y0 与 length，确保 error_rate <= rate。
    """
    prev_end = -1
    new_segs = []
    M, N = grid.shape

    for seg in segments:
        # print(seg.x0)
        # 计算 gap
        target_start = prev_end + 1
        space = seg.x0 - target_start
        if seg.x0 > target_start:
            # 尝试延申起始位置
            
            cand_x0 = target_start
            direction = 1 if seg.direction == "main" else -1
            cand_y0 = (seg.y0 - direction * space)
            cand_length = seg.length + space
            # Move start backward step by step
            while cand_x0 < seg.x0:
                # ensure within bounds
                if cand_x0 < 0 or cand_y0 < 0 or cand_y0 >= N:
                    break
                if seg.direction == 'main':
                    prev = main_ld[cand_x0-1, cand_y0-1] if cand_x0>0 and cand_y0>0 else 0
                    correct = main_ld[cand_x0 + cand_length - 1, cand_y0 + cand_length - 1] - prev
                else:
                    prev = anti_lu[cand_x0-1, cand_y0+1] if cand_x0>0 and cand_y0+1<N else 0
                    correct = anti_lu[cand_x0 + cand_length - 1, cand_y0 - (cand_length - 1)] - prev
                distance = cand_length - correct
                if distance <= maxerr:
                    break
                else:
                    cand_x0 += 1
                    cand_y0 += direction
                    cand_length -= 1
            # update seg
            seg.x0 = cand_x0
            seg.y0 = cand_y0
            seg.length = cand_length
            seg.update_endpoints()
            seg.recalc_distance()

        new_segs.append(seg)
        prev_end = seg.x1

    return new_segs

def chose_segs(segments: List[Segment], length) -> List[Segment]:
    answer = []
    for seg in segments:
        if seg.length < length:
            continue
        answer.append(seg)
    return answer

def minimal_interval_cover2(segs: List[Segment], rate, length) -> List[Segment]:
    """
    使用桶 + 线性贪心算法，最少段数覆盖 [min_x0, max_x1] 上所有匹配位置：
      - 原始段可重叠
      - 每次选取在当前覆盖端点前的候选集中，x1 最大的段
      - 截断该段并加入结果
      - 跳过已选段，直到覆盖至全局终点
    """
    if not segs:
        return []

    # 全局覆盖范围
    min_x = min(s.x0 for s in segs)
    max_x = max(s.x1 for s in segs)

    # 构建一个 size = max_x+1 的桶，记录每个 x0 上能到达的最远 x1 及对应段索引
    best_end = [-1] * (max_x + 1)
    best_idx = [-1] * (max_x + 1)
    for idx, s in enumerate(segs):
        if s.x1 > best_end[s.x0]:
            best_end[s.x0] = s.x1
            best_idx[s.x0] = idx

    covered_end = min_x - 1
    result: List[Segment] = []

    # 线性扫描：每次从 last_cover+1 回顾到 min_x，选出能让 x1 最大的那段
    while covered_end < max_x:
        start_pos = covered_end + 1

        # 在 [min_x .. start_pos] 范围内找 best_end 最大的 x1
        candidate_end = -1
        candidate_i = -1
        # 注意：min_x 是固定的最小 x0
        for x0 in range(min_x, start_pos + 1):
            if best_end[x0] > candidate_end:
                candidate_end = best_end[x0]
                candidate_i = best_idx[x0]

        if candidate_i < 0 or candidate_end < start_pos:
            # 无法继续覆盖
            break

        # 取出那段，做截断
        best = segs[candidate_i]
        new_length = min(best.x1, candidate_end) - start_pos + 1

        # 计算截断后的 y0 与 distance
        if best.direction == 'main':
            new_y0 = best.y0 + (start_pos - best.x0)
            prev = main_ld[start_pos-1][new_y0-1] if start_pos>0 and new_y0>0 else 0
            correct = main_ld[start_pos+new_length-1][new_y0+new_length-1] - prev
        else:
            new_y0 = best.y0 - (start_pos - best.x0)
            prev = anti_lu[start_pos-1][new_y0+1] if start_pos>0 and new_y0+1 < len(grid[0]) else 0
            correct = anti_lu[start_pos+new_length-1][new_y0-new_length+1] - prev

        distance = new_length - correct

        # 仅保留符合阈值的段
        if distance/new_length < rate and new_length >= length:
            new_seg = Segment(start_pos, new_y0, new_length, best.direction, distance)
            result.append(new_seg)

        # 更新覆盖端
        covered_end = candidate_end

    return result

def minimal_interval_cover_err(segs: List[Segment], maxerr, length) -> List[Segment]:
    """
    使用桶 + 线性贪心算法，最少段数覆盖 [min_x0, max_x1] 上所有匹配位置：
      - 原始段可重叠
      - 每次选取在当前覆盖端点前的候选集中，x1 最大的段
      - 截断该段并加入结果
      - 跳过已选段，直到覆盖至全局终点
    """
    if not segs:
        return []

    # 全局覆盖范围
    min_x = min(s.x0 for s in segs)
    max_x = max(s.x1 for s in segs)

    # 构建一个 size = max_x+1 的桶，记录每个 x0 上能到达的最远 x1 及对应段索引
    best_end = [-1] * (max_x + 1)
    best_idx = [-1] * (max_x + 1)
    for idx, s in enumerate(segs):
        if s.x1 > best_end[s.x0]:
            best_end[s.x0] = s.x1
            best_idx[s.x0] = idx

    covered_end = min_x - 1
    result: List[Segment] = []

    # 线性扫描：每次从 last_cover+1 回顾到 min_x，选出能让 x1 最大的那段
    while covered_end < max_x:
        start_pos = covered_end + 1

        # 在 [min_x .. start_pos] 范围内找 best_end 最大的 x1
        candidate_end = -1
        candidate_i = -1
        # 注意：min_x 是固定的最小 x0
        for x0 in range(min_x, start_pos + 1):
            if best_end[x0] > candidate_end:
                candidate_end = best_end[x0]
                candidate_i = best_idx[x0]

        if candidate_i < 0 or candidate_end < start_pos:
            # 无法继续覆盖
            break

        # 取出那段，做截断
        best = segs[candidate_i]
        new_length = min(best.x1, candidate_end) - start_pos + 1

        # 计算截断后的 y0 与 distance
        if best.direction == 'main':
            new_y0 = best.y0 + (start_pos - best.x0)
            prev = main_ld[start_pos-1][new_y0-1] if start_pos>0 and new_y0>0 else 0
            correct = main_ld[start_pos+new_length-1][new_y0+new_length-1] - prev
        else:
            new_y0 = best.y0 - (start_pos - best.x0)
            prev = anti_lu[start_pos-1][new_y0+1] if start_pos>0 and new_y0+1 < len(grid[0]) else 0
            correct = anti_lu[start_pos+new_length-1][new_y0-new_length+1] - prev

        distance = new_length - correct

        # 仅保留符合阈值的段
        if distance <= maxerr and new_length >= length:
            new_seg = Segment(start_pos, new_y0, new_length, best.direction, distance)
            result.append(new_seg)

        # 更新覆盖端
        covered_end = candidate_end

    return result


def merge_with_tolerance(segs: List[Segment],
                         max_gap: int = 1,
                         max_error_rate: float = 0.1) -> List[Segment]:
    """
    对每条平行于主/副对角线的线段组：
      - 如果两段在 x 轴的间隙 gap ≤ max_gap，且 gap/(merged_length) ≤ max_error_rate，
        就把它们合并成一段。
    """
    from collections import defaultdict

    groups = defaultdict(list)
    # 按方向 & 对角线 id 分组（不变）
    for s in segs:
        if s.direction == 'main':
            diag = s.y0 - s.x0
        else:
            diag = s.y0 + s.x0
        groups[(s.direction, diag)].append(s)

    merged_all = []
    # 对每个组，原本要 sort，这里改成「桶扫描」
    for (direction, diag), group in tqdm(list(groups.items()), desc="merge"):
        # 找出该组内的最大 possible x0
        max_x0 = max(s.x0 for s in group)
        # 建桶：每个 x0 对应一个列表
        bucket = [[] for _ in range(max_x0 + 1)]
        for s in group:
            bucket[s.x0].append(s)
        # 线性扫描 x0，从小到大，相当于已经排好序
        curr = None
        for x0 in range(len(bucket)):
            for s in bucket[x0]:
                if curr is None:
                    curr = s
                    continue
                gap = s.x0 - curr.x1 - 1
                merged_len = s.x1 - curr.x0 + 1
                cond_gap = gap <= max_gap
                cond_err = (gap + curr.distance + s.distance) / merged_len <= max_error_rate
                cond_align = (direction == 'main' and s.y0 - curr.y1 == gap+1) or \
                             (direction == 'anti' and curr.y1 - s.y0 == gap+1)
                if cond_gap and cond_err and cond_align:
                    # 合并
                    curr = Segment(curr.x0,
                                   curr.y0,
                                   merged_len,
                                   direction,
                                   gap + curr.distance + s.distance)
                else:
                    merged_all.append(curr)
                    curr = s
        if curr is not None:
            merged_all.append(curr)

    return merged_all

def merge_with_tolerance_err(segs: List[Segment],
                         max_err) -> List[Segment]:
    """
    对每条平行于主/副对角线的线段组：
      - 如果两段在 x 轴的间隙 gap ≤ max_gap，且 gap/(merged_length) ≤ max_error_rate，
        就把它们合并成一段。
    """
    from collections import defaultdict

    groups = defaultdict(list)
    # 按方向 & 对角线 id 分组（不变）
    for s in segs:
        if s.direction == 'main':
            diag = s.y0 - s.x0
        else:
            diag = s.y0 + s.x0
        groups[(s.direction, diag)].append(s)

    merged_all = []
    # 对每个组，原本要 sort，这里改成「桶扫描」
    for (direction, diag), group in tqdm(list(groups.items()), desc="merge"):
        # 找出该组内的最大 possible x0
        max_x0 = max(s.x0 for s in group)
        # 建桶：每个 x0 对应一个列表
        bucket = [[] for _ in range(max_x0 + 1)]
        for s in group:
            bucket[s.x0].append(s)
        # 线性扫描 x0，从小到大，相当于已经排好序
        curr = None
        for x0 in range(len(bucket)):
            for s in bucket[x0]:
                if curr is None:
                    curr = s
                    continue
                gap = s.x0 - curr.x1 - 1
                merged_len = s.x1 - curr.x0 + 1
                cond_err = gap + curr.distance + s.distance <= max_err
                cond_align = (direction == 'main' and s.y0 - curr.y1 == gap+1) or \
                             (direction == 'anti' and curr.y1 - s.y0 == gap+1)
                if cond_err and cond_align:
                    # 合并
                    curr = Segment(curr.x0,
                                   curr.y0,
                                   merged_len,
                                   direction,
                                   gap + curr.distance + s.distance)
                else:
                    merged_all.append(curr)
                    curr = s
        if curr is not None:
            merged_all.append(curr)

    return merged_all


def find_best_matches(query: str, reference: str) -> List[Segment]:
    """
    主函数：给定 query 和 reference，返回保留下来的所有最长匹配段
    """
    global main_ld, grid, anti_lu, all_segs, x0_groups
    """
    主函数：给定 query 和 reference，返回保留下来的所有最长匹配段
    """
    # 0. 构建 dot-plot
    showInfo("start build dot plot")
    grid = build_dotplot(query, reference)
    showInfo("build dot plot finished, start init diag tables")
    main_ld, anti_lu = init_diag_tables(grid)
    showInfo("start find diagonal segments")
    final_segs = find_diagonal_segments(grid)
    showInfo("diagonal segments found")


    # # 2091!!!!! - test2  29814 - test1
    # final_segs = merge_with_tolerance(final_segs, 1, 0.057)   
    # final_segs = minimal_interval_cover2(final_segs, 0.08, 20)
    # final_segs = fill_in_blanks_global(final_segs, 0.065, 25)
    
    
    # # final_segs = weighted_interval_scheduling(final_segs)
    # final_segs = chose_segs(final_segs, 25)


    # final_segs = extend_start_backward(final_segs, 0.1)

    # final_segs = sorted(final_segs, key=lambda s: s.x0, reverse = True)

    # final_segs = extend_end_backward(final_segs, 0.1)

    # final_segs = sorted(final_segs, key=lambda s: s.x0)

    # # 29819!!!!! - test1 
    final_segs = merge_with_tolerance_err(final_segs, 2)
    final_segs = minimal_interval_cover_err(final_segs, 2, 30)

    final_segs = fill_in_blanks_global(final_segs, 0.03, 25)
    

    final_segs = chose_segs(final_segs, 200)


    final_segs = extend_start_backward_err(final_segs, 10)

    final_segs = sorted(final_segs, key=lambda s: s.x0, reverse = True)

    final_segs = extend_end_backward_err(final_segs, 10)

    final_segs = sorted(final_segs, key=lambda s: s.x0)
    
    
    return final_segs

if __name__ == "__main__":

    # reference = "TGATTTAGAACGGACTTAGCAGACATTGAAACTCGAGGGGTATAGCAATAGATGCCCAAAAAGGTAAGCGCCATAAGCGTGGTTCTACGAGCCAGGTGCTCATGCCTAAGTTCTGCGCCTTCGCTGTCACTTGGAAATACTGTAATGGATCATGCCTAGGTTATGCGCCTTCGGGGTCACTTCAACATACTGTAATGGATCATGCCTAGGTTTTGCGTGTTCGCTGTCATTTCGAAATACTCCAATGGATGATGCCTAGGTTCTGTGCCTTCGCTGACGCATGGAAATACTTTAACGGATCATGCCCAGGCTCTGCGCCTTCGCTGAAACTTCGAAATACTCTAATGGATCATGCCTCGGTGCTCCACCTTCGCTTTCATTCCGAAATACTCTAATGGATCGCGTCCGTGTAACAACTTCGTACTGTTATATCGACCATCAGAATACCCATCCCTCGGGGAGGTAACCTATATTCACGTCGCAAGTTTCGATCTACAGTATGCTGACTGTTTGCCGCGATTTTAAGTCAAGAAGCGCGTCCACATGGTCGCGGTCGTCAACTTCAGTACGCTCATATGACACCAAAAGATCTACCTACAGCCCGTGCAGCTCGACTTTTGTGCTCTAGGGCACGACGGGTGGCGTTTGCTCCCGCGCATCTCGACTTTTAAGCTCTATGGCACAACGTGTGGCGTTTGCCCCCGCGCAGCTCGACTTTTGTGCTCTAGGGCACGGCGGGTGGCGTTTGCCCTCGCCCAGCTTGACTTTTGTGCTCTAGGGCACGACGGGTGGCGTTTGCCCCCGTGCAGCCCGACTTTTGTACTCTAGTGCACGACGGGTGGCGTTTGCCCCCGCACCGCTCGACTTTTGTGATCTAGGGCACTACGAGTAGCGTTGGCCCAGACAGATCAACGCACATGGATTCTCTAACAGGCCCCGCGCTTCTCATTGGCCCGTGAGACGGGTCTGAGAGGAAGACATTAGGTAGATACGGAAAGCTTTGGCGTAGTTCGTATCTTTCAGCGGTGAAGCGTCTTCGGTCCGGGCTGCGTTATGCCTGCGGGAGGAAGGCTCCACTAGATGGTTTACGAGACATAATGTCAGCTTCCTAAAGGTACGGCAGCGCCTGCGTATATCACAGGACGAATTGTCAGTTTGCTAGGGGTACGGGAGCGCTTGCGTATTACATAGGACGAATCGTCAGCTTCCTAAAGGGACGGTAGCGCTTGCGTGTTACATAGGACGAATTGTCAGCTTCGTAAAGGTACGGTAGTTCTTGCGTATTACATAGGATGCATTGTCCGCTTCCTAAAGGTACGCTGGCGCTTGCGTATCACATAGGACGGATAGCGCGATTGCTAAAGGTACGGGAGCGCTTGCGTCTTAGAGCGCACGAATCGGATATAAGCTGCGCCCGCGTCTGGCGAGCAAAAATCGTGGGAGCCAGCGAGGGAAAAACTGCTCGGGCGACTTAAACGGAATTACAAGACTCATTGCCATCGAGGACGTTAGACTAAAGAGCCCCTGCGTGCCTCCTTTGTATAGCTCGATGTAGTGGCCCGTGTATGTGGAACAGGAATGCTCGATCTAAGGTAGTAGTGGCTACAGCTCCGAGAGTTTGCGTACTGCGGTGCCAGGGATTTTGCCTGCGGGTACAGCCTCTGCGCACGCCGGTCTGTGATCAAGAACTAAACTAGAGA"
    reference = REFERENCE
    # query = "TGATTTAGAACGGACTTAGCAGACATTGAAACTCGAGGGGTATAGCAATAGATGCCCAAAAAGGTAAGCGCCATAAGCGTGTTTCTACGAGCCAGGTGCTCATGCCTAAGTTCTGCGCCTTCGCTGTCACTGGGAAATACTGTAATGGATCATCCGTAGGTTATGCGCCTTCGGGGTCACTTCAACATACTGTAACGGATCGTGCCTAGGTTTTGCGTATTCGCTGTCATTTCGAATTACACCAATGGATGATGCCTAGGTTCTGTGCCTCCGCTGACGCATCGAAATACTTTAACGGATCGCGTCCGAGTAACAACTTCGTACTGTTATATAGGCAATCAGAATACCCATGCCTCGGGGAGGTAACCTATATTCACGTCGCAAGTTTCGATCTACAGTACTGTAGGTATATCTTTTGGTGTCATATGAGGGTACTGAACTTGACGACCGCGACCATGTGGATGCGCTTCTTGACTTAAAATCGCGGCAAACAGTAAGCATCCGTGAAGCTCGACTTTTGTGCTCTAGGGCACGACGGGTGGCGTTTGCTCCCGCGCATCTCGAGTTGTAAGCTCTATGGCACAACGGGTGGCGTTTGCCGCCGAGCAGCTCGACTTTTGTGCTCTAGGGCACGGCGGGTGGCGTTTGCCCTCGCCCAGCTTGACTTTTGTGCTCTAGGGCACGACGGGTGGCCTTTGCCCCCGCGCAGCTGGACTTTTGTGCTCTAGGGCACGGCGGGTGGCGTTTGCCCTCCCCCAGCTTGACTACTGTGCTCTAGGGCACGACGGGTGGCGTTTGCCCCCGCGCAGCTCGACTTTTGTGCTCTATGGCACGGGGGGTGGCGTTTGCCCTCGCCCAGCTTGACTTTTGCGCTCTAGGGCACGACGGGTGGCGTTTGCCGGCAAACGCCACACGTCGTGCCCTAGAGCACAAACGTCAAGCTGGGCGAGGGCAACCGCCACCCGCCCTGCCCTAGAGCACAAAAGTCGAGCTGCGCGGGCCCGCGCAGCTCGACTTTTGTGCTCTAGGACACGGCGGGTGGCGTTTGCCCTCGCCCAGCTTGACTCTTGTGCTCTAGGGCACGACGGGTGGCGTTTGCCCCAGCGCAGCCCGACTTTTGTACTCTAGAGCACGACGGTTGGCATTTGCCCCCGCACCGCTCGACTTTTGTGATCTAGGGCCCTAGGAGTAGCGTTGGCCAGCTTTCCGTATCTACCTAATGTCTTCCTCTCAGACCCGTCTCACGGGCCAATGAGAAGCGCGGGGCCTATTAGAGAATCCATGTGCGTTGATCTGTCTGCAGACAGCTCAACGCACATGGATTCGCTAGCAGGCCCCGCGCTTCTCATTGGCCCGTGAGACGGGTCTGAGAGGAAGACATAAGGTAGATACGGCAAGCTCACGTCCGTGTAACAACGTCGTACTGTTATATCGACCATCAGAATCCCCATCCCGCGAGGAGGTAACCTATATTCAGGTCGCAAGTTTCGATCTACAGTATTGGCGTAGTTCGTATCTTTCAGCGGTGAAGCTTCTTCGGTCCGGGCTGCGTTATGCCTGCTGGAGGACGGCTCCACTAGATGGTTTACGAGACATAATGTCCGCTTCCTAAAGGTACACTGGCGCTTGAGTATCACATAGGACGGATAGCTCGATTCCTAAAGGGACGGGAGCGCTTGCGTCTTAGAGCGCATGAATCGTCAGCTTCCCAAAGGGACCGTAGCGCTTGCGTGTTATATAGGAAGAATGGTCAGCTTTGTAAAGGTACGGTAGTTCTTGCGTATTACAGAGGATGCATTGTCTACTACCTAAAGGTACGGCAGCGCCTGCGTATATCACAGGACGAATTGTCAGTTTGCTAGGGGTACGGGAGCGCTTGCATATTACATAGGACGAATCGGATATAAGCTGCGCCCGCGTCTGGCGATAAAAAATCGTGGTAGCCAGCGAGGGAAAAACTGCTCGGGCGACTTAAACGGAATTAAAAGACTCATTGCCGTGACAGACTTCCGTATAGCAACCTCTGGGATGTCGATGCGGTGTCCCCAGTCTGCGCTGAGCGGGGGCAGACAGACTTAGTTATAGTATGCATCTGTTTTAGCTAGACATCACGACCTAGTGGGGTTCATGTTGAGATTCTAGGGCGGTACGCAGCCGGTGGATTATTACTTCCCCAGAAATTCTGACTTCGTCACTGGATGGATTGTACTATCCGGTCAACCTTACAAGGTTTCAACAGGGACGAAGGGTAAACGTATGAAGCTTGGATGCCGTTACCGTAAAGGGCCCTATTGAAGTGTCGAGGACGTTAGACTAAAGAGCCCCTGCGTGCCTCCTTTGTATAGCTCGAGGTAGTGGCCCGGATATGTGGAACAGGAATGCTCGATCTAAGGTAGTAGTGGGTACCGCTCCGAGAGTTTGCGTACTGCGGTGCCCGGGATTTTGCCTGCGGGTACAGCCTCTGCGCACGCCGGTCTGTAATCAAGAACTAAACTAGAGA"
    query = QUERY
    showInfo("Start")
    matches = find_best_matches(query, reference)
    
    for seg in matches:
        print(f"({seg.x0}, {seg.x1}, {seg.y0}, {seg.y1})", end=',')

    showInfo("Remain segments:")
    for seg in matches:
        if seg.length >= 30:
            showInfo(seg)
    point = 0
    outputSegs = list()
    for seg in matches:
        length = seg.x1 - seg.x0 + 1
        if length >= 30:
            if seg.direction == "main":
                prev = main_ld[seg.x0-1][seg.y0-1] if seg.x0>0 and seg.y0>0 else 0
                affective_length = main_ld[seg.x1][seg.y1] - prev
            else:
                prev = anti_lu[seg.x0-1][seg.y0+1] if seg.x0>0 and seg.y0+1<len(grid[0]) else 0
                affective_length = anti_lu[seg.x1][seg.y1] - prev
            showInfo(f"affective length = {affective_length}")
            showInfo(f"{seg}; length={length}; {affective_length}; {affective_length/length > 0.9}")
            if affective_length/length > 0.9:
                point += affective_length
            else:
                pass
            # print(seg)
    showInfo(f"final score = {point}")

    # point = 0
    # for seg in matches:
    #     print(seg, end="\t")
    #     print(";length = ", seg.length, end="\t")
    #     affective_length = seg.length-seg.distance
    #     print("affective length = ", affective_length)
    #     point += affective_length
    # print("final score = ", point)